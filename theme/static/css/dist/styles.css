/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-600: oklch(57.7% 0.245 27.325);
    --color-red-900: oklch(39.6% 0.141 25.723);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-blue-600: oklch(54.6% 0.245 262.881);
    --color-blue-700: oklch(48.8% 0.243 264.376);
    --color-indigo-500: oklch(58.5% 0.233 277.117);
    --color-indigo-600: oklch(51.1% 0.262 276.966);
    --color-purple-200: oklch(90.2% 0.063 306.703);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-100: oklch(96.7% 0.003 264.542);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-gray-800: oklch(27.8% 0.033 256.848);
    --color-gray-900: oklch(21% 0.034 264.665);
    --color-gray-950: oklch(13% 0.028 261.692);
    --color-neutral-100: oklch(97% 0 0);
    --color-neutral-200: oklch(92.2% 0 0);
    --color-neutral-300: oklch(87% 0 0);
    --color-neutral-400: oklch(70.8% 0 0);
    --color-neutral-500: oklch(55.6% 0 0);
    --color-neutral-600: oklch(43.9% 0 0);
    --color-neutral-700: oklch(37.1% 0 0);
    --color-neutral-800: oklch(26.9% 0 0);
    --color-neutral-900: oklch(20.5% 0 0);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-2xs: 18rem;
    --container-xs: 20rem;
    --container-sm: 24rem;
    --container-md: 28rem;
    --container-lg: 32rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --font-weight-light: 300;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --font-weight-extrabold: 800;
    --tracking-tight: -0.025em;
    --tracking-normal: 0em;
    --leading-tight: 1.25;
    --leading-normal: 1.5;
    --radius-xs: 0.125rem;
    --radius-sm: 0.25rem;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --radius-2xl: 1rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --animate-spin: spin 1s linear infinite;
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    position: relative;
    display: grid;
    width: 100%;
    overflow: hidden;
    webkit-user-select: none;
    user-select: none;
    direction: ltr;
    container-type: inline-size;
    grid-template-columns: auto 1fr;
  }
  .diff:focus-visible, .diff:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
  }
  .diff:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
  }
  .diff:focus-visible .diff-resizer {
    min-width: 90cqi;
    max-width: 90cqi;
  }
  .diff:has(.diff-item-2:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
  }
  .diff:has(.diff-item-2:focus-visible) .diff-resizer {
    min-width: 10cqi;
    max-width: 10cqi;
  }
  @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
    .diff:focus .diff-resizer {
      min-width: 10cqi;
      max-width: 10cqi;
    }
    .diff:has(.diff-item-1:focus) .diff-resizer {
      min-width: 90cqi;
      max-width: 90cqi;
    }
  }
  .diff {
    position: relative;
    display: grid;
    width: 100%;
    overflow: hidden;
    container-type: inline-size;
    grid-template-columns: auto 1fr;
  }
  .modal {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset: calc(0.25rem * 0);
    margin: calc(0.25rem * 0);
    display: grid;
    height: 100%;
    max-height: none;
    width: 100%;
    max-width: none;
    align-items: center;
    justify-items: center;
    background-color: transparent;
    padding: calc(0.25rem * 0);
    color: inherit;
    overflow-x: hidden;
    transition: translate 0.3s ease-out, visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
    overflow-y: hidden;
    overscroll-behavior: contain;
    z-index: 999;
  }
  .modal::backdrop {
    display: none;
  }
  .modal.modal-open, .modal[open], .modal:target {
    pointer-events: auto;
    visibility: visible;
    opacity: 100%;
    background-color: oklch(0% 0 0/ 0.4);
  }
  .modal.modal-open .modal-box, .modal[open] .modal-box, .modal:target .modal-box {
    translate: 0 0;
    scale: 1;
    opacity: 1;
  }
  @starting-style {
    .modal.modal-open, .modal[open], .modal:target {
      visibility: hidden;
      opacity: 0%;
    }
  }
  .modal-toggle {
    position: fixed;
    height: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    appearance: none;
    opacity: 0%;
  }
  .modal-toggle:checked + .modal {
    pointer-events: auto;
    visibility: visible;
    opacity: 100%;
    background-color: oklch(0% 0 0/ 0.4);
  }
  .modal-toggle:checked + .modal .modal-box {
    translate: 0 0;
    scale: 1;
    opacity: 1;
  }
  @starting-style {
    .modal-toggle:checked + .modal {
      visibility: hidden;
      opacity: 0%;
    }
  }
  .modal {
    pointer-events: none;
    position: fixed;
    inset: calc(0.25rem * 0);
    z-index: 80;
    margin: calc(0.25rem * 0);
    display: grid;
    width: 100%;
    height: 100%;
    justify-items: center;
    overflow-x: hidden;
    overflow-y: auto;
    padding: calc(0.25rem * 4);
    opacity: 0%;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .tooltip {
    position: relative;
    display: inline-block;
    --tt-bg: var(--color-neutral);
    --tt-off: calc(100% + 0.5rem);
    --tt-tail: calc(100% + 1px + 0.25rem);
  }
  .tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
    position: absolute;
    max-width: 20rem;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 2);
    padding-block: calc(0.25rem * 1);
    text-align: center;
    white-space: normal;
    color: var(--color-neutral-content);
    opacity: 0%;
    font-size: 0.875rem;
    line-height: 1.25;
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
    background-color: var(--tt-bg);
    width: max-content;
    pointer-events: none;
    z-index: 2;
    --tw-content: attr(data-tip);
    content: var(--tw-content);
  }
  .tooltip:after {
    position: absolute;
    position: absolute;
    opacity: 0%;
    background-color: var(--tt-bg);
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
    content: "";
    pointer-events: none;
    width: 0.625rem;
    height: 0.25rem;
    display: block;
    mask-repeat: no-repeat;
    mask-position: -1px 0;
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
    mask-image: var(--mask-tooltip);
  }
  .tooltip.tooltip-open > .tooltip-content, .tooltip.tooltip-open[data-tip]:before, .tooltip.tooltip-open:after, .tooltip[data-tip]:not([data-tip=""]):hover > .tooltip-content, .tooltip[data-tip]:not([data-tip=""]):hover[data-tip]:before, .tooltip[data-tip]:not([data-tip=""]):hover:after, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover > .tooltip-content, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover[data-tip]:before, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover:after, .tooltip:has(:focus-visible) > .tooltip-content, .tooltip:has(:focus-visible)[data-tip]:before, .tooltip:has(:focus-visible):after {
    opacity: 100%;
    --tt-pos: 0rem;
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  }
  .tooltip > .tooltip-content, .tooltip[data-tip]:before {
    transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
    inset: auto auto var(--tt-off) 50%;
  }
  .tooltip:after {
    transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
    inset: auto auto var(--tt-tail) 50%;
  }
  .tab {
    position: relative;
    display: inline-flex;
    cursor: pointer;
    appearance: none;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    text-align: center;
    webkit-user-select: none;
    user-select: none;
  }
  @media (hover: hover) {
    .tab:hover {
      color: var(--color-base-content);
    }
  }
  .tab {
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-300);
    --tab-radius-ss: 0;
    --tab-radius-se: 0;
    --tab-radius-es: 0;
    --tab-radius-ee: 0;
    --tab-order: 0;
    --tab-radius-min: calc(0.75rem - var(--border));
    border-color: #0000;
    order: var(--tab-order);
    height: var(--tab-height);
    font-size: 0.875rem;
    padding-inline-start: var(--tab-p);
    padding-inline-end: var(--tab-p);
  }
  .tab:is(input[type="radio"]) {
    min-width: fit-content;
  }
  .tab:is(input[type="radio"]):after {
    content: attr(aria-label);
  }
  .tab:is(label) {
    position: relative;
  }
  .tab:is(label) input {
    position: absolute;
    inset: calc(0.25rem * 0);
    cursor: pointer;
    appearance: none;
    opacity: 0%;
  }
  .tab:checked + .tab-content, .tab:is(label:has(:checked)) + .tab-content, .tab:is(.tab-active, [aria-selected="true"]) + .tab-content {
    display: block;
    height: calc(100% - var(--tab-height) + var(--border));
  }
  .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .tab:not(input):empty {
    flex-grow: 1;
    cursor: default;
  }
  .tab:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .tab:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .tab:focus-visible, .tab:is(label:has(:checked:focus-visible)) {
    outline: 2px solid currentColor;
    outline-offset: -5px;
  }
  .tab[disabled] {
    pointer-events: none;
    opacity: 40%;
  }
  .carousel-prev {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    margin-block: auto;
    display: inline-flex;
    height: max-content;
    cursor: pointer;
    align-items: center;
    justify-content: center;
  }
  .carousel-prev.disabled {
    pointer-events: none;
  }
  .carousel-prev {
    border-start-start-radius: var(--radius-2xl);
    border-end-start-radius: var(--radius-2xl);
  }
  .carousel-next {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    margin-block: auto;
    display: inline-flex;
    height: max-content;
    cursor: pointer;
    align-items: center;
    justify-content: center;
  }
  .carousel-next.disabled {
    pointer-events: none;
  }
  .carousel-next {
    border-start-end-radius: var(--radius-2xl);
    border-end-end-radius: var(--radius-2xl);
  }
  .menu {
    display: flex;
    width: fit-content;
    flex-direction: column;
    flex-wrap: wrap;
    padding: calc(0.25rem * 2);
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    font-size: 0.875rem;
  }
  .menu :where(li ul) {
    position: relative;
    margin-inline-start: calc(0.25rem * 4);
    padding-inline-start: calc(0.25rem * 2);
    white-space: nowrap;
  }
  .menu :where(li ul):before {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 3);
    bottom: calc(0.25rem * 3);
    background-color: var(--color-base-content);
    opacity: 10%;
    width: var(--border);
    content: "";
  }
  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }
  .menu :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    display: grid;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 1.5);
    text-align: start;
    transition-property: color, background-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    text-wrap: balance;
    user-select: none;
  }
  .menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li > details > summary) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }
  .menu :where(li > details > summary):after, .menu :where(li > .menu-dropdown-toggle):after {
    justify-self: flex-end;
    display: block;
    height: 0.375rem;
    width: 0.375rem;
    rotate: -135deg;
    translate: 0 -1px;
    transition-property: rotate, translate;
    transition-duration: 0.2s;
    content: "";
    transform-origin: 50% 50%;
    box-shadow: 2px 2px inset;
    pointer-events: none;
  }
  .menu :where(li > details[open] > summary):after, .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
  }
  .menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: 10%;
    margin: 0.5rem 1rem;
    height: 1px;
  }
  .menu :where(li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
  }
  .menu :where(li) .badge {
    justify-self: flex-end;
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn):active:active), .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:active), .menu :where(li) > details > summary:active:not(.menu :where(li) > details > summary:active:active) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
  }
  .menu :where(li).menu-disabled {
    pointer-events: none;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li).menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .menu .dropdown:focus-within .menu-dropdown-toggle:after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .menu .dropdown-content {
    margin-top: calc(0.25rem * 2);
    padding: calc(0.25rem * 2);
  }
  .menu .dropdown-content:before {
    display: none;
  }
  .menu {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: calc(0.25rem * 0.5);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --menu-active-fg: var(--color-primary);
    --menu-active-bg: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu {
      --menu-active-bg: color-mix(in oklab, var(--color-primary) 10%, #0000);
    }
  }
  .menu {
    --menu-hover-fg: var(--color-base-content);
    --menu-hover-bg: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu {
      --menu-hover-bg: color-mix(in oklab, var(--color-neutral) 10%, #0000);
    }
  }
  .menu :where(li ul) {
    position: relative;
    white-space: nowrap;
  }
  .menu :where(li:not(.dropdown) ul) {
    margin-inline-start: calc(0.25rem * 4);
    padding-inline-start: calc(0.25rem * 2);
  }
  .menu :where(li:not(.dropdown) ul):before {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 3);
    bottom: calc(0.25rem * 2.5);
    background-color: var(--color-base-content);
    opacity: 10%;
    width: var(--border);
    content: "";
  }
  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }
  .menu :where(.menu li:empty) {
    background-color: var(--color-base-content);
    opacity: 10%;
    margin: 0.5rem 1rem;
    height: 1px;
  }
  .menu :where(li:not(.menu-title, .tooltip) > *:not(ul, .collapse, .accordion-content, .menu-title, .btn)) {
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    text-align: start;
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 200ms;
    --tw-duration: 200ms;
    --tw-ease: var(--ease-out);
    text-wrap: balance;
  }
  .menu :where(li:not(.menu-title) > *:not(ul, .collapse, .accordion-content, .menu-title, .btn)) {
    display: grid;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: calc(0.25rem * 2);
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    user-select: none;
  }
  .menu :where(li.tooltip) > * {
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    text-align: start;
  }
  .menu :where(.menu li:not(.menu-title, .menu-disabled)) {
    color: var(--color-base-content);
  }
  .menu :where( .menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .accordion-content, .dropdown-active, .menu-title) ):not(.btn):focus-visible {
    cursor: pointer;
    --tw-outline-style: none;
    outline-style: none;
    color: var(--menu-hover-fg);
    background-color: var(--menu-hover-bg);
  }
  .menu :where( .menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .accordion-content, .dropdown-active, .menu-title) ):hover {
    cursor: pointer;
    --tw-outline-style: none;
    outline-style: none;
    color: var(--menu-hover-fg);
    background-color: var(--menu-hover-bg);
  }
  .menu li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .accordion-content, .btn).menu-active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .menu li.menu-disabled {
    pointer-events: none;
    opacity: 50%;
    webkit-user-select: none;
    user-select: none;
  }
  :where(.menu li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
  }
  :where(.menu li) .badge {
    justify-self: flex-end;
  }
  .link {
    --link-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .link {
      --link-color: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }
  .link {
    display: inline-block;
    cursor: pointer;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: underline;
    color: var(--link-color);
  }
  .link:hover {
    color: var(--link-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .link:hover {
      color: color-mix(in oklab, var(--link-color) 80%, #000);
    }
  }
  .link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  .link:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .link.disabled, .link[disabled], .link:disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .link:where(.link-hover) {
    text-decoration-line: none;
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .link:where(.link-hover):hover {
        text-decoration-line: underline;
      }
    }
  }
  .link:where(.link-animated) {
    position: relative;
    text-decoration-line: none;
  }
  .link:where(.link-animated)::before {
    content: var(--tw-content);
    content: var(--tw-content);
    pointer-events: none;
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    bottom: calc(0.25rem * 0);
    height: 1px;
    width: 100%;
    background-color: currentColor;
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--ease-in-out);
    transition-duration: 300ms;
    --tw-duration: 300ms;
    --tw-ease: var(--ease-in-out);
    --tw-content: '';
  }
  .link:where(.link-animated)::before {
    transform-origin: 100% 50%;
    transform: scale3d(0, 1, 1);
  }
  .link:where(.link-animated):hover::before {
    transform-origin: 0% 50%;
    transform: scale3d(1, 1, 1);
  }
  .range {
    appearance: none;
    webkit-appearance: none;
    --range-color: var(--color-base-content);
    --range-thumb-border-width: 3px;
    --range-track-height: 8px;
    --range-thumb-size: 16px;
    position: relative;
    width: 100%;
    border-radius: calc(infinity * 1px);
    background-color: transparent;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    height: var(--range-track-height);
  }
  .range::-webkit-slider-runnable-track {
    width: 100%;
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-runnable-track {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .range::-webkit-slider-runnable-track {
    height: var(--range-track-height);
  }
  .range::-moz-range-track {
    width: 100%;
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-moz-range-track {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .range::-moz-range-track {
    height: var(--range-track-height);
  }
  .range::-webkit-slider-thumb {
    position: relative;
    top: calc(1/2 * 100%);
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
    border-radius: calc(infinity * 1px);
    background-color: var(--color-base-100);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-thumb {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .range::-webkit-slider-thumb {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-in-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 150ms;
    --tw-duration: 150ms;
    --tw-ease: var(--ease-in-out);
  }
  @media (hover: hover) {
    .range::-webkit-slider-thumb:hover {
      --tw-scale-x: 125%;
      --tw-scale-y: 125%;
      --tw-scale-z: 125%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }
  .range::-webkit-slider-thumb:hover {
    cursor: grab;
    box-shadow: 0 0 0 2px var(--range-color);
  }
  .range::-webkit-slider-thumb:active {
    --tw-scale-x: 125%;
    --tw-scale-y: 125%;
    --tw-scale-z: 125%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
    cursor: grabbing;
    box-shadow: 0 0 0 3px var(--range-color);
  }
  .range::-webkit-slider-thumb {
    appearance: none;
    box-sizing: border-box;
    webkit-appearance: none;
    color: var(--range-color);
    border-color: var(--range-color);
    border-style: solid;
    border-width: var(--range-thumb-border-width);
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
  }
  .range::-moz-range-thumb {
    position: relative;
    border-radius: calc(infinity * 1px);
    background-color: var(--color-base-100);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-in-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 150ms;
    --tw-duration: 150ms;
    --tw-ease: var(--ease-in-out);
    top: 50%;
    color: var(--range-color);
    box-sizing: border-box;
    border-color: var(--range-color);
    border-style: solid;
    border-width: var(--range-thumb-border-width);
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
  }
  .range::-moz-range-thumb:hover {
    cursor: grab;
    box-shadow: 0 0 0 2px var(--range-color);
  }
  .range::-moz-range-thumb:active {
    cursor: grabbing;
    box-shadow: 0 0 0 3px var(--range-color);
  }
  .range:focus {
    outline: none;
  }
  .range.disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .range:disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .range[disabled] {
    pointer-events: none;
    opacity: 50%;
  }
  [dir="rtl"] .range::-webkit-slider-thumb {
    transform: scaleX(-1);
  }
  [dir="rtl"] .range::-moz-range-thumb {
    transform: scaleX(-1);
  }
  [dir="rtl"] .range::-webkit-slider-runnable-track {
    direction: rtl;
  }
  [dir="rtl"] .range::-moz-range-track {
    direction: rtl;
  }
  .tabs-lifted > .tab:focus-visible {
    border-end-end-radius: 0;
    border-end-start-radius: 0;
  }
  .tab {
    position: relative;
    display: inline-flex;
    cursor: pointer;
    appearance: none;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tab {
      --tab-border-color: color-mix(in oklab, var(--color-base-content), #0000 90%);
    }
  }
  .tab {
    padding-inline: var(--tab-p, 1rem);
  }
  .tab:focus, .tab:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .tab[disabled] {
    pointer-events: none;
    opacity: 40%;
  }
  @media (hover: hover) {
    .tab[disabled]:hover {
      pointer-events: none;
      opacity: 40%;
    }
  }
  .tabs-bordered > .tab {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tabs-bordered > .tab {
      border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-bordered > .tab:hover {
        border-color: var(--color-primary);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .tabs-bordered > .tab:hover {
          border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
        }
      }
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-bordered > .tab:hover {
        color: var(--color-primary);
      }
    }
  }
  .tabs-bordered > .tab {
    border-style: solid;
    border-bottom-width: calc(var(--border, 1px) + 1px);
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-lifted > .tab:hover {
        border-color: var(--color-primary);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .tabs-lifted > .tab:hover {
          border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
        }
      }
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-lifted > .tab:hover {
        color: var(--color-primary);
      }
    }
  }
  .tabs-lifted > .tab {
    border: var(--tab-border, 1px) solid transparent;
    border-width: 0 0 var(--tab-border, 1px) 0;
    border-radius: var(--radius-field, 0.375rem);
    border-bottom-color: var(--tab-border-color);
    padding-inline-start: var(--tab-p, 1rem);
    padding-inline-end: var(--tab-p, 1rem);
    padding-top: var(--tab-border, 1px);
  }
  .tabs-lifted > .tab.tab-active:not([disabled]) {
    background-color: var(--tab-bg);
    border-width: var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px);
    border-color: var(--tab-border-color);
    border-end-start-radius: 0;
    border-end-end-radius: 0;
    padding-inline-start: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
    padding-inline-end: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
    padding-bottom: var(--tab-border, 1px);
    padding-top: 0;
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):before {
    content: "";
    display: block;
    position: absolute;
    z-index: 1;
    width: calc(100% + var(--radius-field, 0.375rem) * 2);
    height: var(--radius-field, 0.375rem);
    bottom: 0;
    background-size: var(--radius-field, 0.375rem);
    background-repeat: no-repeat;
    background-position: top left, top right;
    --tab-grad: calc(69% - var(--tab-border, 1px));
    --radius-start: radial-gradient(
    circle at top left,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
    --radius-end: radial-gradient(
    circle at top right,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
    background-image: var(--radius-start), var(--radius-end);
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):first-child:before {
    background-image: var(--radius-end);
    background-position: top right;
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):last-child:before {
    background-image: var(--radius-start);
    background-position: top left;
  }
  [dir="rtl"] .tabs-lifted > .tab.tab-active:not([disabled]):first-child:before {
    background-image: var(--radius-start);
    background-position: top left;
  }
  [dir="rtl"] .tabs-lifted > .tab.tab-active:not([disabled]):last-child:before {
    background-image: var(--radius-end);
    background-position: top right;
  }
  .tabs-xl :where(.tab) {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
    --size: calc(var(--size-field, 0.25rem) * 14);
    --tab-p: 1.5rem;
  }
  .tabs-lg :where(.tab) {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --size: calc(var(--size-field, 0.25rem) * 11.5);
    --tab-p: 1.25rem;
  }
  .tabs-md :where(.tab) {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --tab-p: 1rem;
  }
  .tabs-sm :where(.tab) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --size: calc(var(--size-field, 0.25rem) * 7.5);
    --tab-p: 0.75rem;
  }
  .tabs-xs :where(.tab) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --size: calc(var(--size-field, 0.25rem) * 6);
    --tab-p: 0.5rem;
  }
  .dropdown {
    position: relative;
    display: inline-block;
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
  }
  .dropdown > *:not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .dropdown > *:not(summary):focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .dropdown .dropdown-content {
    position: absolute;
  }
  .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  .dropdown[popover], .dropdown .dropdown-content {
    z-index: 999;
    animation: dropdown 0.2s;
    transition-property: opacity, scale, display;
    transition-behavior: allow-discrete;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  @starting-style {
    .dropdown[popover], .dropdown .dropdown-content {
      scale: 95%;
      opacity: 0;
    }
  }
  .dropdown.dropdown-open > [tabindex]:first-child, .dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .dropdown:focus-within > [tabindex]:first-child {
    pointer-events: none;
  }
  .dropdown.dropdown-open .dropdown-content, .dropdown:not(.dropdown-hover):focus .dropdown-content, .dropdown:focus-within .dropdown-content {
    opacity: 100%;
  }
  .dropdown.dropdown-hover:hover .dropdown-content {
    opacity: 100%;
    scale: 100%;
  }
  .dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }
  .dropdown.dropdown-open .dropdown-content, .dropdown:focus .dropdown-content, .dropdown:focus-within .dropdown-content {
    scale: 100%;
  }
  .dropdown:where([popover]) {
    background: #0000;
  }
  .dropdown[popover] {
    position: fixed;
    color: inherit;
  }
  @supports not (position-area: bottom) {
    .dropdown[popover] {
      margin: auto;
    }
    .dropdown[popover].dropdown-open:not(:popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
    .dropdown[popover]::backdrop {
      background-color: color-mix(in oklab, #000 30%, #0000);
    }
  }
  .dropdown[popover]:not(.dropdown-open, :popover-open) {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  :where(.btn) {
    width: unset;
  }
  .btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 1.5);
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, 0.875rem);
    font-weight: 600;
    outline-color: var(--btn-color, var(--color-base-content));
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 0.2s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
  }
  .btn {
    --btn-shadow: 0 3px 2px -2px var(--btn-bg),
    0 4px 3px -2px var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }
  }
  .btn {
    --btn-noise: var(--fx-noise);
  }
  .prose .btn {
    text-decoration-line: none;
  }
  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
    }
  }
  .btn:focus-visible {
    outline-width: 2px;
    outline-style: solid;
    isolation: isolate;
  }
  .btn:active:not(.btn-active) {
    translate: 0 0.5px;
    --btn-bg: var(--btn-color, var(--color-base-200));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
    }
  }
  .btn:active:not(.btn-active) {
    --btn-border: var(--btn-color, var(--color-base-200));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
  }
  .btn:active:not(.btn-active) {
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }
  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    box-shadow: none;
  }
  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
  @media (hover: hover) {
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      pointer-events: none;
      background-color: var(--color-neutral);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
      }
    }
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      --btn-border: #0000;
      --btn-fg: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
  }
  .btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }
  .btn:is(input[type="checkbox"], input[type="radio"])::after {
    content: attr(aria-label);
  }
  .btn:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }
  .btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    text-align: center;
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: none;
    webkit-user-select: none;
    user-select: none;
  }
  @media (prefers-reduced-motion: reduce) {
    .btn {
      transition-property: none;
    }
  }
  .btn {
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    height: var(--size);
    outline-color: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      outline-color: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, var(--color-base-100));
    }
  }
  .btn {
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.96, 1.03);
    transition-duration: 0.25s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border: var(--border) solid var(--btn-border);
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 8%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --btn-bg: var(--btn-color, var(--color-neutral));
    --btn-fg: var(--color-neutral-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
  }
  .btn {
    --btn-shadow: 0px 1px 3px 0px var(--color-base-300),
    0px 1px 2px -1px var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-shadow: 0px 1px 3px 0px color-mix(in oklab, var(--color-base-300) 40%, #0000),
    0px 1px 2px -1px color-mix(in oklab, var(--color-base-300) 40%, #0000);
    }
  }
  .btn {
    --btn-noise: var(--fx-noise);
  }
  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 90%, #000);
      }
    }
  }
  .btn:active:hover:not(.btn-active), .btn:active:focus:not(.btn-active) {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    --tw-scale-z: 95%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: ease-out;
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
  }
  .btn:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)), #000 10%);
    }
  }
  .btn:focus-visible {
    outline-width: 2px;
    outline-style: solid;
  }
  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    opacity: 50%;
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }
  .btn:is(input[type="checkbox"], input[type="radio"])::after {
    content: attr(aria-label);
  }
  .btn:is(input[type="checkbox"], input[type="radio"]):checked {
    background: var(--color-primary);
    color: var(--color-primary-content);
    outline-color: var(--color-primary);
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    isolation: isolate;
  }
  .pin-input {
    border-radius: var(--radius-field);
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .pin-input {
    background-color: var(--color-base-100);
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .pin-input::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .pin-input {
    height: var(--size);
    width: var(--size);
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .pin-input:hover:not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input:hover:not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .pin-input:focus, .pin-input:focus-within {
    border-color: var(--color-primary);
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input:focus, .pin-input:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--color-primary) 30%, #0000);
    }
  }
  .pin-input:focus, .pin-input:focus-within {
    outline: 1px solid var(--color-primary);
    isolation: isolate;
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    pointer-events: none;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      background-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
    }
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .pin-input.disabled::placeholder, .pin-input:disabled::placeholder, .pin-input[disabled]::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled::placeholder, .pin-input:disabled::placeholder, .pin-input[disabled]::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .dropdown-item {
    clear: both;
    display: flex;
    width: 100%;
    align-items: center;
    column-gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    background-color: transparent;
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    color: var(--color-base-content);
    text-decoration-line: none;
    text-decoration-thickness: 0px;
    text-align: inherit;
  }
  .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
    --tw-outline-style: none;
    outline-style: none;
  }
  .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
    pointer-events: none;
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
      background-color: color-mix(in oklab, var(--color-neutral) 5%, transparent);
    }
  }
  .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .accordion-toggle {
    width: 100%;
    cursor: pointer;
    padding-inline: calc(0.25rem * 5);
    padding-block: calc(0.25rem * 4);
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    color: var(--color-base-content);
  }
  .accordion-toggle:disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .range.\!disabled {
    pointer-events: none !important;
    opacity: 50% !important;
  }
  .range.disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .carousel-prev.\!disabled {
    pointer-events: none !important;
  }
  .carousel-next.\!disabled {
    pointer-events: none !important;
  }
  .carousel-prev.disabled {
    pointer-events: none;
  }
  .carousel-next.disabled {
    pointer-events: none;
  }
  .collapse:not(td, tr, colgroup) {
    visibility: visible;
  }
  .collapse {
    position: relative;
    display: grid;
    overflow: hidden;
    border-radius: var(--radius-box, 1rem);
    width: 100%;
    grid-template-rows: max-content 0fr;
    transition: grid-template-rows 0.2s;
    isolation: isolate;
  }
  .collapse > input:is([type="checkbox"], [type="radio"]) {
    grid-column-start: 1;
    grid-row-start: 1;
    appearance: none;
    opacity: 0;
    z-index: 1;
    width: 100%;
    padding: 1rem;
    padding-inline-end: 3rem;
    min-height: 1lh;
    transition: background-color 0.2s ease-out;
  }
  .collapse:is([open], :focus:not(.collapse-close)), .collapse:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
    grid-template-rows: max-content 1fr;
  }
  .collapse:is([open], :focus:not(.collapse-close)) > .collapse-content, .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    visibility: visible;
    min-height: fit-content;
  }
  .collapse:focus-visible, .collapse:has(> input:is([type="checkbox"], [type="radio"]):focus-visible) {
    outline-color: var(--color-base-content);
    outline-style: solid;
    outline-width: 2px;
    outline-offset: 2px;
  }
  .collapse:not(.collapse-close) > input[type="checkbox"], .collapse:not(.collapse-close) > input[type="radio"]:not(:checked), .collapse:not(.collapse-close) > .collapse-title {
    cursor: pointer;
  }
  .collapse:focus:not(.collapse-close, .collapse[open]) > .collapse-title {
    cursor: unset;
  }
  .collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    padding-bottom: 1rem;
    transition: padding 0.2s ease-out, background-color 0.2s ease-out;
  }
  .collapse:is([open]).collapse-arrow > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse.collapse-open.collapse-arrow > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse.collapse-open.collapse-plus > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse.collapse-arrow:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse[open].collapse-plus > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-plus:focus:not(.collapse-close) > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-plus:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    content: "−";
  }
  .collapse:is(details) {
    width: 100%;
  }
  .collapse:is(details) summary {
    position: relative;
    display: block;
  }
  .collapse:is(details) summary::-webkit-details-marker {
    display: none;
  }
  .collapse:is(details) summary {
    outline: none;
  }
  .tooltip-content {
    visibility: hidden;
    position: absolute;
    display: inline-block;
    padding: calc(0.25rem * 2);
    opacity: 0%;
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    width: max-content;
    z-index: 20;
  }
  .validator-hint {
    visibility: hidden;
    margin-top: calc(0.25rem * 2);
    font-size: 0.75rem;
  }
  .validator:user-valid, .validator:user-valid:focus, .validator:user-valid:checked, .validator:user-valid[aria-checked="true"], .validator:user-valid:focus-within, .validator:has(:user-valid), .validator:has(:user-valid):focus, .validator:has(:user-valid):checked, .validator:has(:user-valid)[aria-checked="true"], .validator:has(:user-valid):focus-within {
    --input-color: var(--color-success);
  }
  .validator:user-invalid, .validator:user-invalid:focus, .validator:user-invalid:checked, .validator:user-invalid[aria-checked="true"], .validator:user-invalid:focus-within, .validator:has(:user-invalid), .validator:has(:user-invalid):focus, .validator:has(:user-invalid):checked, .validator:has(:user-invalid)[aria-checked="true"], .validator:has(:user-invalid):focus-within, .validator[aria-invalid]:not([aria-invalid="false"]), .validator[aria-invalid]:not([aria-invalid="false"]):focus, .validator[aria-invalid]:not([aria-invalid="false"]):checked, .validator[aria-invalid]:not([aria-invalid="false"])[aria-checked="true"], .validator[aria-invalid]:not([aria-invalid="false"]):focus-within {
    --input-color: var(--color-error);
  }
  .validator:user-invalid ~ .validator-hint, .validator:has(:user-invalid) ~ .validator-hint, .validator[aria-invalid]:not([aria-invalid="false"]) ~ .validator-hint {
    visibility: visible;
    display: block;
    color: var(--color-error);
  }
  .collapse {
    visibility: collapse;
  }
  .collapse:not(td):not(tr):not(colgroup) {
    visibility: visible;
  }
  .invisible {
    visibility: hidden;
  }
  .visible {
    visibility: visible;
  }
  .list {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;
  }
  .list :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    position: relative;
    display: grid;
    grid-auto-flow: column;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    word-break: break-word;
    grid-template-columns: var(--list-grid-cols);
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(1)) {
    --list-grid-cols: 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(2)) {
    --list-grid-cols: minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(3)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(4)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(5)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(6)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
  }
  .list :where(.list-row) :not(.list-col-wrap) {
    grid-row-start: 1;
  }
  .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
    content: "";
    border-bottom: var(--border) solid;
    inset-inline: var(--radius-box);
    position: absolute;
    bottom: calc(0.25rem * 0);
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
      border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
    }
  }
  .toggle {
    border: var(--border) solid currentColor;
    color: var(--input-color);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    grid-template-columns: 0fr 1fr 1fr;
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
    padding: var(--toggle-p);
    box-shadow: 0 1px currentColor inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
  }
  .toggle {
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle {
      --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  .toggle {
    --toggle-p: calc(var(--size) * 0.125);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
    height: var(--size);
  }
  .toggle > * {
    z-index: 1;
    grid-column: span 1 / span 1;
    grid-column-start: 2;
    grid-row-start: 1;
    height: 100%;
    cursor: pointer;
    appearance: none;
    background-color: transparent;
    padding: calc(0.25rem * 0.5);
    transition: opacity 0.2s, rotate 0.4s;
    border: none;
  }
  .toggle > *:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .toggle > *:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .toggle > *:nth-child(2) {
    color: var(--color-base-100);
    rotate: 0deg;
  }
  .toggle > *:nth-child(3) {
    color: var(--color-base-100);
    opacity: 0%;
    rotate: -15deg;
  }
  .toggle:has(:checked) > :nth-child(2) {
    opacity: 0%;
    rotate: 15deg;
  }
  .toggle:has(:checked) > :nth-child(3) {
    opacity: 100%;
    rotate: 0deg;
  }
  .toggle:before {
    position: relative;
    inset-inline-start: calc(0.25rem * 0);
    grid-column-start: 2;
    grid-row-start: 1;
    aspect-ratio: 1 / 1;
    height: 100%;
    border-radius: var(--radius-selector);
    background-color: currentColor;
    translate: 0;
    --tw-content: "";
    content: var(--tw-content);
    transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle:before {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
    }
  }
  .toggle:before {
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  @media (forced-colors: active) {
    .toggle:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .toggle:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .toggle:focus-visible, .toggle:has(:focus-visible) {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .toggle:checked, .toggle[aria-checked="true"], .toggle:has(> input:checked) {
    grid-template-columns: 1fr 1fr 0fr;
    background-color: var(--color-base-100);
    --input-color: var(--color-base-content);
  }
  .toggle:checked:before, .toggle[aria-checked="true"]:before, .toggle:has(> input:checked):before {
    background-color: currentColor;
  }
  @starting-style {
    .toggle:checked:before, .toggle[aria-checked="true"]:before, .toggle:has(> input:checked):before {
      opacity: 0;
    }
  }
  .toggle:indeterminate {
    grid-template-columns: 0.5fr 1fr 0.5fr;
  }
  .toggle:disabled {
    cursor: not-allowed;
    opacity: 30%;
  }
  .toggle:disabled:before {
    background-color: transparent;
    border: var(--border) solid currentColor;
  }
  .switch {
    border: var(--border) solid #0000;
    color: var(--color-base-100);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
  }
  @media print {
    .switch {
      outline: .25rem solid;
    }
  }
  .switch {
    grid-template-columns: 0fr 1fr 1fr;
    padding: var(--switch-p);
    box-shadow: 0 1px currentColor inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .switch {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
  }
  .switch {
    background-color: var(--input-color);
    --radius-selector-max: calc(var(--radius-selector) + var(--radius-selector) + var(--radius-selector));
    border-radius: calc( var(--radius-selector) + min(var(--switch-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .switch {
      --input-color: color-mix(in oklab, var(--color-neutral) 22%, #0000);
    }
  }
  .switch {
    --switch-p: 0.1875rem;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--switch-p)) * 2);
    height: var(--size);
  }
  .switch:before {
    position: relative;
    inset-inline-start: calc(0.25rem * 0);
    grid-column-start: 2;
    grid-row-start: 1;
    aspect-ratio: 1 / 1;
    height: 100%;
    border-radius: var(--radius-selector);
    background-color: currentColor;
  }
  @media print {
    .switch:before {
      outline: .25rem solid;
    }
  }
  @media print {
    .switch:before {
      outline-offset: -1rem;
    }
  }
  .switch:before {
    translate: 0;
    --tw-content: "";
    content: var(--tw-content);
    transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
    box-shadow: 0 -1px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 8px 0 -4px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px 2px 0 oklch(0% 0 0 / 0.2);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  @media (forced-colors: active) {
    .switch:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  .switch:focus-visible, .switch:has(:focus-visible) {
    outline: 2px solid var(--input-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .switch:focus-visible, .switch:has(:focus-visible) {
      outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
    }
  }
  .switch:focus-visible, .switch:has(:focus-visible) {
    outline-offset: 0px;
  }
  .switch:checked, .switch[aria-checked="true"], .switch:has(> input:checked) {
    grid-template-columns: 1fr 1fr 0fr;
    --input-color: var(--color-neutral);
    background-color: var(--input-color);
  }
  .switch:checked:before, .switch[aria-checked="true"]:before, .switch:has(> input:checked):before {
    background-color: currentColor;
  }
  @starting-style {
    .switch:checked:before, .switch[aria-checked="true"]:before, .switch:has(> input:checked):before {
      opacity: 0;
    }
  }
  .switch:indeterminate {
    grid-template-columns: 0.5fr 1fr 0.5fr;
  }
  .switch:disabled {
    cursor: not-allowed;
    opacity: 50%;
  }
  .switch:disabled:before {
    background-color: transparent;
  }
  .input {
    cursor: text;
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 2);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .input {
    --size: calc(var(--size-field, 0.25rem) * 10);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .input:where(input) {
    display: inline-flex;
  }
  .input :where(input) {
    display: inline-flex;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .input :where(input):focus, .input :where(input):focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .input :where(input):focus, .input :where(input):focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .input :where(input[type="url"]), .input :where(input[type="email"]) {
    direction: ltr;
  }
  .input :where(input[type="date"]) {
    display: inline-block;
  }
  .input:focus, .input:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:focus, .input:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .input:focus, .input:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .input:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  .input::-webkit-date-and-time-value {
    text-align: inherit;
  }
  .input[type="number"]::-webkit-inner-spin-button {
    margin-block: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -3);
  }
  .input::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
  }
  .table {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    border-radius: var(--radius-box);
    text-align: left;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  @media (hover: hover) {
    .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
      background-color: var(--color-base-200);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
        background-color: color-mix(in oklab, var(--color-base-200) 80%, transparent);
      }
    }
  }
  .table tr.row-active, .table tr.row-active:nth-child(even) {
    background-color: var(--color-base-200);
  }
  .table :where(th, td) {
    padding-inline: calc(0.25rem * 5);
    padding-block: calc(0.25rem * 3);
    vertical-align: middle;
    text-wrap: nowrap;
  }
  .table :where(thead, tfoot) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    white-space: nowrap;
    color: var(--color-base-content);
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  .table :where(th) {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .table :where(.table-pin-rows thead tr) {
    position: sticky;
    top: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-rows tfoot tr) {
    position: sticky;
    bottom: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-cols tr th) {
    position: sticky;
    right: calc(0.25rem * 0);
    left: calc(0.25rem * 0);
    background-color: var(--color-base-100);
  }
  .table :where(thead tr) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
    }
  }
  .table :where(tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 10%, #0000);
    }
  }
  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
    }
  }
  .table {
    font-size: 0.875rem;
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    text-align: left;
  }
  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  @media (hover: hover) {
    .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
      background-color: var(--color-base-200);
    }
  }
  .table :where(th, td) {
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    vertical-align: middle;
  }
  .table :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead, tfoot) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .table :where(thead, tfoot) {
    font-size: 0.875rem;
    font-weight: 600;
  }
  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .table :where(.table-pin-rows thead tr) {
    position: sticky;
    top: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-rows tfoot tr) {
    position: sticky;
    bottom: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-cols tr th) {
    position: sticky;
    right: calc(0.25rem * 0);
    left: calc(0.25rem * 0);
    background-color: var(--color-base-100);
  }
  .table :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: 0.25rem;
    --range-bg: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range {
      --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .range {
    cursor: pointer;
    overflow: hidden;
    background-color: transparent;
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    border: none;
    height: var(--range-thumb-size);
  }
  [dir="rtl"] .range {
    --range-dir: -1;
  }
  .range:focus {
    outline: none;
  }
  .range:focus-visible {
    outline: 2px solid;
    outline-offset: 2px;
  }
  .range::-webkit-slider-runnable-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  @media (forced-colors: active) {
    .range::-webkit-slider-runnable-track {
      border: 1px solid;
    }
  }
  @media (forced-colors: active) {
    .range::-moz-range-track {
      border: 1px solid;
    }
  }
  .range::-webkit-slider-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    appearance: none;
    webkit-appearance: none;
    top: 50%;
    color: var(--range-progress);
    transform: translateY(-50%);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  .range::-moz-range-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  .range::-moz-range-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    top: 50%;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-moz-range-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  .range:disabled {
    cursor: not-allowed;
    opacity: 30%;
  }
  .select {
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 4);
    padding-inline-end: calc(0.25rem * 7);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
    background-size: 4px 4px, 4px 4px;
    background-repeat: no-repeat;
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .select {
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .select {
    --size: calc(var(--size-field, 0.25rem) * 10);
  }
  [dir="rtl"] .select {
    background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
  }
  .select select {
    margin-inline-start: calc(0.25rem * -4);
    margin-inline-end: calc(0.25rem * -7);
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 4);
    padding-inline-end: calc(0.25rem * 7);
    height: calc(100% - 2px);
    background: inherit;
    border-radius: inherit;
    border-style: none;
  }
  .select select:focus, .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .select select:focus, .select select:focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .select select:not(:last-child) {
    margin-inline-end: calc(0.25rem * -5.5);
    background-image: none;
  }
  .select:focus, .select:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:focus, .select:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .select:focus, .select:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .select:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
  .select {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'><path fill='none' stroke='%239293AE' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 9l6 6l6-6'/></svg>");
    background-size: 1.3em;
    background-position: calc(100% - 0.5rem) center;
    background-repeat: no-repeat;
    touch-action: manipulation;
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .select {
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .select:hover:not(:focus, :focus-within), .select:has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:hover:not(:focus, :focus-within), .select:has(:hover):not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  [dir="rtl"] .select {
    background-position: calc(0% + 1.3em) center;
  }
  .select select {
    margin-inline-end: calc(0.25rem * -10);
    height: 100%;
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    background-color: transparent;
    border-style: none;
  }
  .select select:focus, .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  .select[multiple] {
    background-image: none;
  }
  .select:focus, .select:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:focus, .select:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .select:focus, .select:focus-within {
    outline: 1px solid var(--input-color);
    border-color: var(--input-color);
    isolation: isolate;
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-style: var(--tw-border-style);
    border-width: 0px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .select:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
  .input > .select {
    height: auto;
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .input > .select:focus, .input > .select:focus-within {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    outline-style: var(--tw-outline-style);
    outline-width: 0px;
  }
  .select:has(> .select-floating) select::placeholder {
    color: transparent;
  }
  .select:has(> .select-floating) select:focus::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> .select-floating) select:focus::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .advance-select-toggle {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    appearance: none;
    align-items: center;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .advance-select-toggle {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .advance-select-toggle {
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .advance-select-toggle:focus, .advance-select-toggle:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .advance-select-toggle:focus, .advance-select-toggle:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .advance-select-toggle:focus, .advance-select-toggle:focus-within {
    outline: 1px solid var(--input-color);
    border-color: var(--input-color);
    isolation: isolate;
  }
  .advance-select-toggle:focus-visible {
    outline: unset;
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .card {
    background-color: var(--color-base-100);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .card {
    --tw-outline-style: none;
    outline-style: none;
    box-shadow: var( --card-shadow, 0 1px 3px 0 var(--color-base-300), 0 1px 2px -1px var(--color-base-300) );
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      box-shadow: var( --card-shadow, 0 1px 3px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000), 0 1px 2px -1px color-mix(in oklab, var(--color-base-300) 20%, #0000) );
    }
  }
  .card {
    border-width: var(--card-border, 0px);
  }
  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .card:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .card :where(figure:first-child) {
    overflow: hidden;
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-start-radius: unset;
    border-end-end-radius: unset;
  }
  .card :where(figure:last-child) {
    overflow: hidden;
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-start-radius: inherit;
    border-end-end-radius: inherit;
  }
  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card:where(.card-border) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .card.image-full {
    display: grid;
  }
  .card.image-full:before {
    position: relative;
    grid-column-start: 1;
    grid-row-start: 1;
    border-radius: var(--radius-box);
    background-color: var(--color-neutral);
    opacity: 75%;
    content: "";
  }
  .card.image-full > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .card.image-full > .card-body {
    position: relative;
    color: var(--color-neutral-content);
  }
  .card.image-full :where(figure) {
    overflow: hidden;
    border-radius: inherit;
  }
  .card.image-full > figure img {
    height: 100%;
    object-fit: cover;
  }
  .card figure {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }
  .card:has(> :checked) {
    outline: 2px solid currentColor;
  }
  .card .card-alert {
    border-radius: 0;
  }
  .card .card-alert:first-child {
    border-top-left-radius: var(--radius-box);
    border-top-right-radius: var(--radius-box);
  }
  .card .card-alert:last-child {
    border-bottom-right-radius: var(--radius-box);
    border-bottom-left-radius: var(--radius-box);
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    outline-width: 2px;
    transition: outline 0.2s ease-in-out;
    outline: 0 solid #0000;
    outline-offset: 2px;
  }
  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .card:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .card:focus-visible {
    outline-color: currentColor;
  }
  .card :where(figure:first-child) {
    overflow: hidden;
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-start-radius: unset;
    border-end-end-radius: unset;
  }
  .card :where(figure:last-child) {
    overflow: hidden;
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-start-radius: inherit;
    border-end-end-radius: inherit;
  }
  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-200);
  }
  .card:where(.card-dash) {
    border: var(--border) dashed var(--color-base-200);
  }
  .card.image-full {
    display: grid;
  }
  .card.image-full > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .card.image-full > .card-body {
    position: relative;
    color: var(--color-neutral-content);
  }
  .card.image-full :where(figure) {
    overflow: hidden;
    border-radius: inherit;
  }
  .card.image-full > figure img {
    height: 100%;
    object-fit: cover;
    filter: brightness(28%);
  }
  .card figure {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }
  .card:has(> :checked) {
    outline: 2px solid currentColor;
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
  }
  .swap input {
    appearance: none;
    border: none;
  }
  .swap > * {
    grid-column-start: 1;
    grid-row-start: 1;
    transition-property: transform, rotate, opacity;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
  .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
    opacity: 0%;
  }
  .swap input:is(:checked, :indeterminate) ~ .swap-off {
    opacity: 0%;
  }
  .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
    opacity: 100%;
    backface-visibility: visible;
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
  }
  .swap input {
    appearance: none;
    border: none;
  }
  .swap > * {
    grid-column-start: 1;
    grid-row-start: 1;
    transition-property: transform, rotate, opacity;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
  .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
    opacity: 0%;
  }
  .swap input:is(:checked, :indeterminate) ~ .swap-off {
    opacity: 0%;
  }
  .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
    opacity: 100%;
    backface-visibility: visible;
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
  .menu-horizontal {
    display: inline-flex;
    flex-direction: row;
  }
  .menu-horizontal > li:not(.menu-title) > .collapse > ul {
    position: absolute;
    margin-inline-start: calc(0.25rem * 0);
    margin-top: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2);
    padding-inline-end: calc(0.25rem * 2);
  }
  .menu-horizontal > li > .collapse > ul:before {
    content: none;
  }
  :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .menu-horizontal {
    display: inline-flex;
    flex-direction: row;
  }
  .menu-horizontal > li:not(.menu-title) > details > ul {
    position: absolute;
    margin-inline-start: calc(0.25rem * 0);
    margin-top: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2);
    padding-inline-end: calc(0.25rem * 2);
  }
  .menu-horizontal > li > details > ul:before {
    content: none;
  }
  :where(.menu-horizontal > li:not(.menu-title) > details > ul) {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    box-shadow: 0 1px 3px 0 oklch(0% 0 0/0.1), 0 1px 2px -1px oklch(0% 0 0/0.1);
  }
  .checkbox {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-neutral-content);
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .checkbox {
    --input-color: var(--color-neutral);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:focus-visible {
      outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
    }
  }
  .checkbox:focus-visible {
    outline-offset: 0px;
  }
  .checkbox:checked, .checkbox[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    border-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:checked, .checkbox[aria-checked="true"] {
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000);
    }
  }
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 100%;
  }
  @media (forced-colors: active) {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  @media print {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  .checkbox:indeterminate {
    background-color: var(--color-neutral);
  }
  .checkbox:indeterminate:before {
    rotate: 0deg;
    opacity: 100%;
    translate: 0 -35%;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  }
  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 50%;
  }
  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .checkbox {
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }
  .checkbox:checked, .checkbox[aria-checked="true"] {
    background-color: var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:checked, .checkbox[aria-checked="true"] {
      background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .checkbox:checked, .checkbox[aria-checked="true"] {
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 100%;
  }
  @media (forced-colors: active) {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  @media print {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  .checkbox:indeterminate {
    background-color: var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:indeterminate {
      background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .checkbox:indeterminate:before {
    rotate: 0deg;
    opacity: 100%;
    translate: 0 -35%;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  }
  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .radio {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .radio {
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, var(--color-neutral));
  }
  .radio:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .radio:focus-visible {
    outline: 2px solid var(--input-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio:focus-visible {
      outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
    }
  }
  .radio:focus-visible {
    outline-offset: 0px;
  }
  .radio:checked, .radio[aria-checked="true"] {
    animation: radio 0.2s ease-out;
    border-color: currentColor;
    background-color: var(--color-base-100);
    box-shadow: 0 1px 2px 0 var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio:checked, .radio[aria-checked="true"] {
      box-shadow: 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 30%, #0000);
    }
  }
  .radio:checked:before, .radio[aria-checked="true"]:before {
    background-color: currentColor;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  @media (forced-colors: active) {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .radio:disabled {
    cursor: not-allowed;
    opacity: 50%;
  }
  .radio {
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--input-color, currentColor);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio {
      border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
    }
  }
  .radio {
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);
  }
  .radio:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .radio:focus-visible {
    outline: 2px solid currentColor;
  }
  .radio:checked, .radio[aria-checked="true"] {
    animation: radio 0.2s ease-out;
    border-color: currentColor;
    background-color: var(--color-base-100);
  }
  .radio:checked:before, .radio[aria-checked="true"]:before {
    background-color: currentColor;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  @media (forced-colors: active) {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .radio:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .progress {
    position: relative;
    height: calc(0.25rem * 2);
    width: 100%;
    appearance: none;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .progress {
      background-color: color-mix(in oklab, currentColor 20%, transparent);
    }
  }
  .progress {
    color: var(--color-base-content);
  }
  .progress:indeterminate {
    background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
    background-size: 200%;
    background-position-x: 15%;
    animation: progress 5s ease-in-out infinite;
  }
  @supports (-moz-appearance: none) {
    .progress:indeterminate::-moz-progress-bar {
      background-color: transparent;
      background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
      background-size: 200%;
      background-position-x: 15%;
      animation: progress 5s ease-in-out infinite;
    }
  }
  @supports (-moz-appearance: none) {
    .progress::-moz-progress-bar {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  @supports (-webkit-appearance: none) {
    .progress::-webkit-progress-bar {
      border-radius: var(--radius-box);
      background-color: transparent;
    }
    .progress::-webkit-progress-value {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-2xl);
  }
  .alert {
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    color: var(--color-neutral-content);
    text-align: start;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--alert-bg);
    border: var(--border) solid var(--alert-border);
    box-shadow: 0 0.1875rem 0 -0.125rem oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset;
    --alert-bg: var(--alert-color, var(--color-neutral));
    --alert-border: var(--alert-color, var(--color-neutral));
  }
  .alert.alert-outline {
    color: var(--alert-color, var(--color-neutral));
    --alert-bg: transparent;
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-soft {
    color: var(--alert-color, var(--color-neutral));
    --alert-bg: var(--alert-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      --alert-bg: color-mix(in oklab, var(--alert-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
  }
  .alert.alert-soft {
    box-shadow: none;
    background-image: none;
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .inset-y-0 {
    inset-block: calc(var(--spacing) * 0);
  }
  .start-2 {
    inset-inline-start: calc(var(--spacing) * 2);
  }
  .end-0 {
    inset-inline-end: calc(var(--spacing) * 0);
  }
  .end-2 {
    inset-inline-end: calc(var(--spacing) * 2);
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-1\/2 {
    top: calc(1/2 * 100%);
  }
  .top-2 {
    top: calc(var(--spacing) * 2);
  }
  .top-full {
    top: 100%;
  }
  .bottom-full {
    bottom: 100%;
  }
  .left-0 {
    left: calc(var(--spacing) * 0);
  }
  .file-input {
    cursor: pointer;
    cursor: pointer;
    border: var(--border) solid #0000;
    display: inline-flex;
    appearance: none;
    align-items: center;
    background-color: var(--color-base-100);
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    padding-inline-end: 0.75rem;
    font-size: 0.875rem;
    line-height: 2;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .file-input {
    --size: calc(var(--size-field, 0.25rem) * 10);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .file-input::file-selector-button {
    margin-inline-end: calc(0.25rem * 4);
    cursor: pointer;
    padding-inline: calc(0.25rem * 4);
    webkit-user-select: none;
    user-select: none;
    height: calc(100% + var(--border) * 2);
    margin-block: calc(var(--border) * -1);
    margin-inline-start: calc(var(--border) * -1);
    font-size: 0.875rem;
    color: var(--btn-fg);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    border-start-start-radius: calc(var(--join-ss, var(--radius-field) - var(--border)));
    border-end-start-radius: calc(var(--join-es, var(--radius-field) - var(--border)));
    font-weight: 600;
    background-color: var(--btn-bg);
    background-size: calc(var(--noise) * 100%);
    background-image: var(--btn-noise);
    text-shadow: 0 0.5px oklch(1 0 0 / calc(var(--depth) * 0.15));
    box-shadow: 0 0.5px 0 0.5px white inset, var(--btn-shadow);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input::file-selector-button {
      box-shadow: 0 0.5px 0 0.5px color-mix( in oklab, color-mix(in oklab, white 30%, var(--btn-bg)) calc(var(--depth) * 20%), #0000 ) inset, var(--btn-shadow);
    }
  }
  .file-input::file-selector-button {
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-border: var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input::file-selector-button {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 5%);
    }
  }
  .file-input::file-selector-button {
    --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input::file-selector-button {
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000);
    }
  }
  .file-input::file-selector-button {
    --btn-noise: var(--fx-noise);
  }
  .file-input:focus {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input:focus {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) 10%, #0000);
    }
  }
  .file-input:focus {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  .file-input:has(> input[disabled]), .file-input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
  }
  .file-input:has(> input[disabled])::placeholder, .file-input:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input:has(> input[disabled])::placeholder, .file-input:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .file-input:has(> input[disabled]), .file-input:is(:disabled, [disabled]) {
    box-shadow: none;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input:has(> input[disabled]), .file-input:is(:disabled, [disabled]) {
      color: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
  .file-input:has(> input[disabled])::file-selector-button, .file-input:is(:disabled, [disabled])::file-selector-button {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .file-input:has(> input[disabled])::file-selector-button, .file-input:is(:disabled, [disabled])::file-selector-button {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
  .input {
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: text;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  .input::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .input:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .input {
    border: var(--border) solid #0000;
    height: var(--size);
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .input {
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .input:hover:not(:focus, :focus-within), .input:has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:hover:not(:focus, :focus-within), .input:has(:hover):not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .input:where(input) {
    display: inline-block;
  }
  .input :where(input:not([type="checkbox"]):not([type="radio"])) {
    display: inline-block;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .input :where(input:not([type="checkbox"]):not([type="radio"])):focus, .input :where(input:not([type="checkbox"]):not([type="radio"])):focus-within, .input :where(input:not([type="checkbox"]):not([type="radio"])):focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .input:focus, .input:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:focus, .input:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .input:focus, .input:focus-within {
    outline: 1px solid var(--input-color);
    isolation: isolate;
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-style: var(--tw-border-style);
    border-width: 0px;
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .input:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  .input::-webkit-date-and-time-value {
    text-align: inherit;
  }
  .input[type="number"]::-webkit-inner-spin-button {
    margin-block: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -3);
  }
  .input:has(> .input-floating) input::placeholder {
    color: transparent;
  }
  .input:has(> .input-floating) input:focus::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> .input-floating) input:focus::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .textarea {
    display: inline-flex;
    min-height: calc(0.25rem * 20);
    width: 100%;
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
  }
  .textarea::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  @media (hover: hover) {
    .textarea:hover {
      border-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea:hover {
        border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
    }
  }
  .textarea:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .textarea {
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    touch-action: manipulation;
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .textarea :where(textarea) {
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .textarea :where(textarea):focus, .textarea :where(textarea):focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  .textarea:focus, .textarea:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:focus, .textarea:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .textarea:focus, .textarea:focus-within {
    outline: 1px solid var(--input-color);
    border-color: var(--input-color);
    isolation: isolate;
  }
  .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .textarea:has(> textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }
  .textarea:has(> textarea) {
    padding: calc(0.25rem * 0);
  }
  .textarea:has(> textarea) textarea {
    height: auto;
    min-height: calc(0.25rem * 20);
    width: 100%;
  }
  .textarea:has(> textarea) textarea:first-child {
    padding-block: calc(0.25rem * 2);
    padding-inline-start: calc(0.25rem * 4);
  }
  .textarea:has(> textarea) textarea:nth-child(2) {
    padding-block: calc(0.25rem * 2);
  }
  .textarea:has(> textarea) textarea:last-child {
    padding-block: calc(0.25rem * 2);
    padding-inline-end: calc(0.25rem * 4);
  }
  .textarea:has(> .textarea-floating) {
    padding: calc(0.25rem * 0);
  }
  .textarea:has(> .textarea-floating) :where(.textarea-floating:first-child) > textarea {
    padding-block: calc(0.25rem * 2);
    padding-inline-start: calc(0.25rem * 4);
  }
  .textarea:has(> .textarea-floating) :where(.textarea-floating:nth-child(2)) > textarea {
    padding-block: calc(0.25rem * 2);
  }
  .textarea:has(> .textarea-floating) :where(.textarea-floating:last-child) > textarea {
    padding-block: calc(0.25rem * 2);
    padding-inline-end: calc(0.25rem * 4);
  }
  .textarea:has(> .textarea-floating) :where(.textarea-floating:nth-child(2)) .textarea-floating-label, .textarea:has(> .textarea-floating) :where(.textarea-floating:last-child) .textarea-floating-label {
    margin-inline-start: calc(0.25rem * 0);
  }
  .textarea:has(> .textarea-floating) * > textarea {
    width: 100%;
    height: 100%;
    min-height: calc(0.25rem * 20);
  }
  .textarea:has(> .textarea-floating) textarea::placeholder {
    color: transparent;
  }
  .textarea:has(> .textarea-floating) textarea:focus::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> .textarea-floating) textarea:focus::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .hero-content {
    isolation: isolate;
    display: flex;
    max-width: 80rem;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 4);
    padding: calc(0.25rem * 4);
  }
  .textarea {
    border: var(--border) solid #0000;
    min-height: calc(0.25rem * 20);
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-block: calc(0.25rem * 2);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    padding-inline-start: 0.75rem;
    padding-inline-end: 0.75rem;
    font-size: 0.875rem;
    touch-action: manipulation;
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .textarea {
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .textarea textarea {
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .textarea textarea:focus, .textarea textarea:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .textarea textarea:focus, .textarea textarea:focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .textarea:focus, .textarea:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:focus, .textarea:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .textarea:focus, .textarea:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .textarea:has(> textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }
  .stack {
    display: inline-grid;
    grid-template-columns: 3px 4px 1fr 4px 3px;
    grid-template-rows: 3px 4px 1fr 4px 3px;
  }
  .stack > * {
    height: 100%;
    width: 100%;
  }
  .stack > *:nth-child(n + 2) {
    width: 100%;
    opacity: 70%;
  }
  .stack > *:nth-child(2) {
    z-index: 2;
    opacity: 90%;
  }
  .stack > *:nth-child(1) {
    z-index: 3;
    width: 100%;
  }
  .stack > *, .stack.stack-bottom > * {
    grid-column: 3 / 4;
    grid-row: 3 / 6;
  }
  .stack > *:nth-child(2), .stack.stack-bottom > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack > *:nth-child(1), .stack.stack-bottom > *:nth-child(1) {
    grid-column: 1 / 6;
    grid-row: 1 / 4;
  }
  .stack.stack-top > * {
    grid-column: 3 / 4;
    grid-row: 1 / 4;
  }
  .stack.stack-top > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-top > *:nth-child(1) {
    grid-column: 1 / 6;
    grid-row: 3 / 6;
  }
  .stack.stack-start > * {
    grid-column: 1 / 4;
    grid-row: 3 / 4;
  }
  .stack.stack-start > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-start > *:nth-child(1) {
    grid-column: 3 / 6;
    grid-row: 1 / 6;
  }
  .stack.stack-end > * {
    grid-column: 3 / 6;
    grid-row: 3 / 4;
  }
  .stack.stack-end > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-end > *:nth-child(1) {
    grid-column: 1 / 4;
    grid-row: 1 / 6;
  }
  .stack {
    display: inline-grid;
    place-items: center;
    align-items: flex-end;
  }
  .stack > * {
    grid-column-start: 1;
    grid-row-start: 1;
    height: 100%;
    width: 100%;
    opacity: 60%;
    transform: translateY(14%) scale(0.9);
    z-index: 1;
  }
  .stack > *:nth-child(2) {
    opacity: 80%;
    transform: translateY(7%) scale(0.95);
    z-index: 2;
  }
  .stack > *:nth-child(1) {
    opacity: 100%;
    transform: translateY(0) scale(1) translateX(0);
    z-index: 3;
  }
  .modal-backdrop {
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    align-self: stretch;
    justify-self: stretch;
    color: transparent;
    z-index: -1;
  }
  .modal-backdrop button {
    cursor: pointer;
  }
  .dropdown-menu {
    z-index: 10;
    margin-top: calc(0.25rem * 2);
  }
  :where(.dropdown-menu > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(0.25rem * 1) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(0.25rem * 1) * calc(1 - var(--tw-space-y-reverse)));
  }
  .dropdown-menu {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    text-wrap: nowrap;
    opacity: 0%;
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-menu {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .dropdown-menu {
    transition-property: opacity,margin;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
  }
  .advance-select-menu {
    z-index: 10;
    width: 100%;
  }
  :where(.advance-select-menu > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(0.25rem * 0.5) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(0.25rem * 0.5) * calc(1 - var(--tw-space-y-reverse)));
  }
  .advance-select-menu {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    background-image: none;
    padding: calc(0.25rem * 2);
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .advance-select-menu {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .z-20 {
    z-index: 20;
  }
  .z-40 {
    z-index: 40;
  }
  .z-50 {
    z-index: 50;
  }
  .col-span-1 {
    grid-column: span 1 / span 1;
  }
  .col-span-3 {
    grid-column: span 3 / span 3;
  }
  .hero {
    display: grid;
    width: 100%;
    place-items: center;
    background-size: cover;
    background-position: center;
  }
  .hero > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .modal-box {
    grid-column-start: 1;
    grid-row-start: 1;
    max-height: 100vh;
    width: calc(11/12 * 100%);
    max-width: 32rem;
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 6);
    transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
    border-top-left-radius: var(--modal-tl, var(--radius-box));
    border-top-right-radius: var(--modal-tr, var(--radius-box));
    border-bottom-left-radius: var(--modal-bl, var(--radius-box));
    border-bottom-right-radius: var(--modal-br, var(--radius-box));
    scale: 95%;
    opacity: 0;
    box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
    overflow-y: auto;
    overscroll-behavior: contain;
  }
  .container {
    width: 100%;
  }
  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }
  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }
  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }
  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }
  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }
  .divider {
    display: flex;
    height: calc(0.25rem * 4);
    flex-direction: row;
    align-items: center;
    align-self: stretch;
    white-space: nowrap;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider {
      --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .divider:before, .divider:after {
    content: "";
    height: calc(0.25rem * 0.5);
    width: 100%;
    flex-grow: 1;
    background-color: var(--divider-color);
  }
  @media print {
    .divider:before, .divider:after {
      border: 0.5px solid;
    }
  }
  .divider:not(:empty) {
    gap: calc(0.25rem * 4);
  }
  .\!filter {
    display: flex !important;
    flex-wrap: wrap !important;
  }
  .\!filter input[type="radio"] {
    width: auto !important;
  }
  .\!filter input {
    overflow: hidden !important;
    opacity: 100% !important;
    scale: 1 !important;
    border-width: 0 !important;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
  }
  .\!filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1) !important;
  }
  .\!filter input.filter-reset {
    aspect-ratio: 1 / 1 !important;
  }
  .\!filter input.filter-reset::after {
    content: "×" !important;
  }
  .\!filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .\!filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .\!filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
  }
  .filter input[type="radio"] {
    width: auto;
  }
  .filter input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    border-width: 0;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
  }
  .filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1);
  }
  .filter input.filter-reset {
    aspect-ratio: 1 / 1;
  }
  .filter input.filter-reset::after {
    content: "×";
  }
  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .\!filter {
    display: flex !important;
    flex-wrap: wrap !important;
  }
  .\!filter input[type="radio"] {
    width: auto !important;
  }
  .\!filter input {
    overflow: hidden !important;
    opacity: 100% !important;
    scale: 1 !important;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
  }
  .\!filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1) !important;
  }
  .\!filter input.filter-reset {
    aspect-ratio: 1 / 1 !important;
  }
  .\!filter input.filter-reset::after {
    content: "×" !important;
  }
  .\!filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .\!filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .\!filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
  }
  .filter input[type="radio"] {
    width: auto;
  }
  .filter input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
  }
  .filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1);
  }
  .filter input.filter-reset {
    aspect-ratio: 1 / 1;
  }
  .filter input.filter-reset::after {
    content: "×";
  }
  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .mx-1\.5 {
    margin-inline: calc(var(--spacing) * 1.5);
  }
  .mx-4 {
    margin-inline: calc(var(--spacing) * 4);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .my-4 {
    margin-block: calc(var(--spacing) * 4);
  }
  .my-auto {
    margin-block: auto;
  }
  .label {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    white-space: nowrap;
    color: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }
  }
  .label:has(input) {
    cursor: pointer;
  }
  .label:is(.input > *, .select > *) {
    display: flex;
    height: calc(100% - 0.5rem);
    align-items: center;
    padding-inline: calc(0.25rem * 3);
    white-space: nowrap;
    font-size: inherit;
  }
  .label:is(.input > *, .select > *):first-child {
    margin-inline-start: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * 3);
    border-inline-end: var(--border) solid currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):first-child {
      border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .label:is(.input > *, .select > *):last-child {
    margin-inline-start: calc(0.25rem * 3);
    margin-inline-end: calc(0.25rem * -3);
    border-inline-start: var(--border) solid currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):last-child {
      border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .join-item:where(*:not(:first-child, :disabled, [disabled], .btn-disabled)) {
    margin-inline-start: calc(var(--border, 1px) * -1);
    margin-block-start: 0;
  }
  .join-item:where(*:is(:disabled, [disabled], .btn-disabled)) {
    border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
  }
  .join-item:where(*:not(:first-child, :disabled, [disabled], .btn-disabled)) {
    margin-inline-start: calc(var(--border, 1px) * -1);
    margin-block-start: 0;
  }
  .join-item:where(*:is(:disabled, [disabled], .btn-disabled)) {
    border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
  }
  .\!ms-auto {
    margin-inline-start: auto !important;
  }
  .ms-0\.5 {
    margin-inline-start: calc(var(--spacing) * 0.5);
  }
  .ms-2 {
    margin-inline-start: calc(var(--spacing) * 2);
  }
  .ms-3 {
    margin-inline-start: calc(var(--spacing) * 3);
  }
  .input::file-selector-button {
    margin-inline-end: calc(0.25rem * 4);
    display: inline-flex;
    height: 100%;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    border-style: var(--tw-border-style);
    border-width: 0px;
    background-color: var(--color-primary);
    padding-inline: calc(0.25rem * 4);
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-leading: 1;
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-content);
    text-transform: uppercase;
    text-decoration-line: none;
    webkit-user-select: none;
    user-select: none;
    --input-color: var(--color-primary);
  }
  .input::file-selector-button.input-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .input::file-selector-button.input-md {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .input::file-selector-button.input-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .input::file-selector-button.input-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .input[type="file"] {
    overflow: hidden;
    padding-inline-start: calc(0.25rem * 0);
  }
  .input-floating .input::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input-floating .input::file-selector-button {
      border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .input-floating .input::file-selector-button {
    outline: none;
  }
  .select-sm {
    --size: calc(var(--size-field, 0.25rem) * 7.5);
    padding-inline-start: calc(0.25rem * 2.5);
    padding-inline-end: calc(0.25rem * 8);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .select-sm select {
    margin-inline-end: calc(0.25rem * -8);
    padding-inline-start: calc(0.25rem * 2.5);
    padding-inline-end: calc(0.25rem * 8);
  }
  .\!me-1\.5 {
    margin-inline-end: calc(var(--spacing) * 1.5) !important;
  }
  .me-3 {
    margin-inline-end: calc(var(--spacing) * 3);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mt-14 {
    margin-top: calc(var(--spacing) * 14);
  }
  .breadcrumbs {
    max-width: 100%;
    overflow-x: auto;
    padding-block: calc(0.25rem * 2);
  }
  .breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol {
    display: flex;
    min-height: min-content;
    align-items: center;
    white-space: nowrap;
  }
  .breadcrumbs > menu > li, .breadcrumbs > ul > li, .breadcrumbs > ol > li {
    display: flex;
    align-items: center;
  }
  .breadcrumbs > menu > li > *, .breadcrumbs > ul > li > *, .breadcrumbs > ol > li > * {
    display: flex;
    cursor: pointer;
    align-items: center;
    gap: calc(0.25rem * 2);
  }
  @media (hover: hover) {
    .breadcrumbs > menu > li > *:hover, .breadcrumbs > ul > li > *:hover, .breadcrumbs > ol > li > *:hover {
      text-decoration-line: underline;
    }
  }
  .breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .breadcrumbs > menu > li > *:focus-visible, .breadcrumbs > ul > li > *:focus-visible, .breadcrumbs > ol > li > *:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .breadcrumbs > menu > li + *:before, .breadcrumbs > ul > li + *:before, .breadcrumbs > ol > li + *:before {
    content: "";
    margin-right: calc(0.25rem * 3);
    margin-left: calc(0.25rem * 2);
    display: block;
    height: calc(0.25rem * 1.5);
    width: calc(0.25rem * 1.5);
    opacity: 40%;
    rotate: 45deg;
    border-top: 1px solid;
    border-right: 1px solid;
    background-color: #0000;
  }
  [dir="rtl"] .breadcrumbs > menu > li + *:before, [dir="rtl"] .breadcrumbs > ul > li + *:before, [dir="rtl"] .breadcrumbs > ol > li + *:before {
    rotate: -135deg;
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .fieldset-legend {
    margin-bottom: calc(0.25rem * -1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: calc(0.25rem * 2);
    padding-block: calc(0.25rem * 2);
    color: var(--color-base-content);
    font-weight: 600;
  }
  .mb-0\.5 {
    margin-bottom: calc(var(--spacing) * 0.5);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2);
    height: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .status {
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: color-mix(in srgb, #000 30%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      color: color-mix(in srgb, #000 30%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .status {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }
  }
  .status {
    background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
    box-shadow: 0 2px 3px -1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2.5);
    height: calc(0.25rem * 2.5);
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: var(--color-neutral);
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000);
    box-shadow: 0 2px 3px -1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .divider {
    display: flex;
    width: 100%;
    align-items: center;
    align-self: stretch;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    white-space: nowrap;
  }
  .divider:not(:empty) {
    gap: calc(0.25rem * 4);
  }
  .divider:before {
    content: "";
    height: 1px;
    width: 100%;
    flex-grow: 1;
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 0px;
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider:before {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .divider:after {
    content: "";
    height: 1px;
    width: 100%;
    flex-grow: 1;
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 0px;
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider:after {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .progress {
    display: flex;
    height: calc(0.25rem * 1.5);
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-base-200);
  }
  .tabs {
    display: flex;
    flex-wrap: wrap;
    --tabs-height: auto;
    --tabs-direction: row;
    --tab-height: calc(var(--size-field, 0.25rem) * 10);
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .tabs {
    display: flex;
    --tabs-height: auto;
    --tabs-direction: row;
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .breadcrumbs {
    max-width: 100%;
    overflow-x: auto;
  }
  :where(.breadcrumbs > ul) {
    display: flex;
    align-items: center;
    padding-inline: calc(0.25rem * 1);
    padding-block: calc(0.25rem * 2);
    white-space: nowrap;
    min-height: min-content;
  }
  :where(.breadcrumbs > ol) {
    display: flex;
    align-items: center;
    padding-inline: calc(0.25rem * 1);
    padding-block: calc(0.25rem * 2);
    white-space: nowrap;
    min-height: min-content;
  }
  :where(.breadcrumbs > ul > li) {
    display: inline-flex;
    align-items: center;
  }
  :where(.breadcrumbs > ol > li) {
    display: inline-flex;
    align-items: center;
  }
  :where(.breadcrumbs > ul > li > a) {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1);
  }
  @media (hover: hover) {
    :where(.breadcrumbs > ul > li > a):hover {
      color: var(--color-primary);
    }
  }
  :where(.breadcrumbs > ul > li > a):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  :where(.breadcrumbs > ul > li > a):focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  :where(.breadcrumbs > ol > li > a) {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1);
  }
  @media (hover: hover) {
    :where(.breadcrumbs > ol > li > a):hover {
      color: var(--color-primary);
    }
  }
  :where(.breadcrumbs > ol > li > a):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  :where(.breadcrumbs > ol > li > a):focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  :where(.breadcrumbs > ul > li:last-child) {
    cursor: text;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    color: var(--color-base-content);
  }
  :where(.breadcrumbs > ol > li:last-child) {
    cursor: text;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    color: var(--color-base-content);
  }
  .progress-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-neutral);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    white-space: nowrap;
    color: var(--color-neutral-content);
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-in-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
    --tw-ease: var(--ease-in-out);
  }
  .progress-bar.progress-indeterminate {
    width: 100%;
    background: linear-gradient(90deg, rgba(0, 0, 0, 0) 50%, var(--progress-color) 50%);
    background-size: 50% 100%;
    background-repeat: no-repeat;
    animation: indeterminate-progress 4s infinite ease-in-out;
  }
  .stat {
    display: inline-grid;
    width: 100%;
    column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 1);
    padding-inline: calc(0.25rem * 6);
    padding-block: calc(0.25rem * 4);
    grid-template-columns: repeat(1, 1fr);
    border-color: inherit;
  }
  .stat {
    display: inline-grid;
    width: 100%;
    column-gap: calc(0.25rem * 4);
    padding-inline: calc(0.25rem * 6);
    padding-block: calc(0.25rem * 4);
    grid-template-columns: repeat(1, 1fr);
  }
  .stat:not(:last-child) {
    border-inline-end: var(--border) dashed currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .stat:not(:last-child) {
      border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .stat:not(:last-child) {
    border-block-end: none;
  }
  .card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
  }
  .card-body :where(p) {
    flex-grow: 1;
  }
  :where(.card-header) + .card-body {
    padding-top: 0;
  }
  :where(.card-body) + .card-footer {
    padding-top: 0;
  }
  .card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, 0.875rem);
  }
  .card-body :where(p) {
    flex-grow: 1;
  }
  .label-text {
    display: block;
    cursor: pointer;
    padding: calc(0.25rem * 1);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    color: var(--color-base-content);
  }
  .carousel {
    display: inline-flex;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    scrollbar-width: none;
  }
  .carousel::-webkit-scrollbar {
    display: none;
  }
  .alert {
    display: grid;
    align-items: center;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    color: var(--color-base-content);
    background-color: var(--alert-color, var(--color-base-200));
    justify-content: start;
    justify-items: start;
    grid-auto-flow: column;
    grid-template-columns: auto;
    text-align: start;
    border: var(--border) solid var(--color-base-200);
    font-size: 0.875rem;
    line-height: 1.25rem;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert {
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
    }
  }
  .alert:has(:nth-child(2)) {
    grid-template-columns: auto minmax(auto, 1fr);
  }
  .alert.alert-outline {
    background-color: transparent;
    color: var(--alert-color);
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-dash {
    background-color: transparent;
    color: var(--alert-color);
    border-style: dashed;
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-soft {
    color: var(--alert-color, var(--color-base-content));
    background: var(--alert-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      background: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100) );
    }
  }
  .alert.alert-soft {
    border-color: var(--alert-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      border-color: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100) );
    }
  }
  .alert.alert-soft {
    box-shadow: none;
    background-image: none;
  }
  .fieldset {
    display: grid;
    gap: calc(0.25rem * 1.5);
    padding-block: calc(0.25rem * 1);
    font-size: 0.75rem;
    grid-template-columns: 1fr;
    grid-auto-rows: max-content;
  }
  .carousel-body {
    display: flex;
    flex-wrap: nowrap;
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
  }
  .join :where(.join-item) {
    border-start-start-radius: var(--join-ss, 0);
    border-start-end-radius: var(--join-se, 0);
    border-end-start-radius: var(--join-es, 0);
    border-end-end-radius: var(--join-ee, 0);
  }
  .join :where(.join-item) * {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:first-child) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join :first-child:not(:last-child) :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join > .join-item:where(:last-child) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join :last-child:not(:first-child) :where(.join-item) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:only-child) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join :only-child :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
  }
  .join :where(.join-item) {
    border-start-start-radius: var(--join-ss, 0);
    border-start-end-radius: var(--join-se, 0);
    border-end-start-radius: var(--join-es, 0);
    border-end-end-radius: var(--join-ee, 0);
  }
  .join :where(.join-item) * {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:first-child) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join :first-child:not(:last-child) :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join > .join-item:where(:last-child) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join :last-child:not(:first-child) :where(.join-item) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:only-child) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join :only-child :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
  .tooltip {
    display: inline-block;
    text-align: center;
  }
  .\!flex {
    display: flex !important;
  }
  .\!hidden {
    display: none !important;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .table {
    display: table;
  }
  .table-caption {
    display: table-caption;
  }
  .table-cell {
    display: table-cell;
  }
  .btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
  }
  .btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
  }
  .size-3 {
    width: calc(var(--spacing) * 3);
    height: calc(var(--spacing) * 3);
  }
  .size-3\.5 {
    width: calc(var(--spacing) * 3.5);
    height: calc(var(--spacing) * 3.5);
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-5 {
    width: calc(var(--spacing) * 5);
    height: calc(var(--spacing) * 5);
  }
  .size-6 {
    width: calc(var(--spacing) * 6);
    height: calc(var(--spacing) * 6);
  }
  .size-8 {
    width: calc(var(--spacing) * 8);
    height: calc(var(--spacing) * 8);
  }
  .input > .select {
    height: auto;
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .input > .select:focus, .input > .select:focus-within {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    outline-style: var(--tw-outline-style);
    outline-width: 0px;
  }
  .\!h-2\.5 {
    height: calc(var(--spacing) * 2.5) !important;
  }
  .h-2 {
    height: calc(var(--spacing) * 2);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-8 {
    height: calc(var(--spacing) * 8);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .h-16 {
    height: calc(var(--spacing) * 16);
  }
  .h-auto {
    height: auto;
  }
  .h-full {
    height: 100%;
  }
  .h-screen {
    height: 100vh;
  }
  .max-h-24 {
    max-height: calc(var(--spacing) * 24);
  }
  .max-h-52 {
    max-height: calc(var(--spacing) * 52);
  }
  .max-h-60 {
    max-height: calc(var(--spacing) * 60);
  }
  .max-h-72 {
    max-height: calc(var(--spacing) * 72);
  }
  .min-h-9\.5 {
    min-height: calc(var(--spacing) * 9.5);
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .advance-select-option {
    width: 100%;
    cursor: pointer;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  @media (hover: hover) {
    .advance-select-option:hover {
      background-color: var(--color-neutral);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .advance-select-option:hover {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
    }
  }
  .advance-select-option:focus {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .advance-select-option:focus {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .advance-select-option:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  .\!w-2\.5 {
    width: calc(var(--spacing) * 2.5) !important;
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-8 {
    width: calc(var(--spacing) * 8);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-20 {
    width: calc(var(--spacing) * 20);
  }
  .w-32 {
    width: calc(var(--spacing) * 32);
  }
  .w-36 {
    width: calc(var(--spacing) * 36);
  }
  .w-40 {
    width: calc(var(--spacing) * 40);
  }
  .w-48 {
    width: calc(var(--spacing) * 48);
  }
  .w-64 {
    width: calc(var(--spacing) * 64);
  }
  .w-\[calc\(100\%-32px\)\] {
    width: calc(100% - 32px);
  }
  .w-auto {
    width: auto;
  }
  .w-full {
    width: 100%;
  }
  .max-w-24 {
    max-width: calc(var(--spacing) * 24);
  }
  .max-w-75 {
    max-width: calc(var(--spacing) * 75);
  }
  .max-w-full {
    max-width: 100%;
  }
  .max-w-lg {
    max-width: var(--container-lg);
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .max-w-sm {
    max-width: var(--container-sm);
  }
  .max-w-xs {
    max-width: var(--container-xs);
  }
  .min-w-2xs {
    min-width: var(--container-2xs);
  }
  .min-w-9\.5 {
    min-width: calc(var(--spacing) * 9.5);
  }
  .min-w-24 {
    min-width: calc(var(--spacing) * 24);
  }
  .min-w-28 {
    min-width: calc(var(--spacing) * 28);
  }
  .min-w-48 {
    min-width: calc(var(--spacing) * 48);
  }
  .min-w-md {
    min-width: var(--container-md);
  }
  .min-w-xs {
    min-width: var(--container-xs);
  }
  .flex-1 {
    flex: 1;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .grow {
    flex-grow: 1;
  }
  .-translate-x-full {
    --tw-translate-x: -100%;
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .-translate-y-1\/2 {
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .animate-spin {
    animation: var(--animate-spin);
  }
  .link {
    cursor: pointer;
    text-decoration-line: underline;
  }
  .link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .link:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .link:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .list-none {
    list-style-type: none;
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row {
    flex-direction: row;
  }
  .flex-nowrap {
    flex-wrap: nowrap;
  }
  .items-center {
    align-items: center;
  }
  .\!justify-between {
    justify-content: space-between !important;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-evenly {
    justify-content: space-evenly;
  }
  .justify-start {
    justify-content: flex-start;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  :where(.space-y-0\.5 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 0.5) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 0.5) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-4 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
  }
  .gap-x-1 {
    column-gap: calc(var(--spacing) * 1);
  }
  .gap-x-2 {
    column-gap: calc(var(--spacing) * 2);
  }
  .gap-x-3 {
    column-gap: calc(var(--spacing) * 3);
  }
  :where(.divide-y > :not(:last-child)) {
    --tw-divide-y-reverse: 0;
    border-bottom-style: var(--tw-border-style);
    border-top-style: var(--tw-border-style);
    border-top-width: calc(1px * var(--tw-divide-y-reverse));
    border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  }
  :where(.accordion:where(.accordion-bordered) > :not(:last-child)) {
    --tw-divide-y-reverse: 0;
    border-bottom-style: var(--tw-border-style);
    border-top-style: var(--tw-border-style);
    border-top-width: calc(1px * var(--tw-divide-y-reverse));
    border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(.accordion:where(.accordion-bordered) > :not(:last-child)) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .accordion:where(.accordion-bordered) {
    border-radius: var(--radius-box);
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .accordion:where(.accordion-bordered) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .accordion:where(.accordion-bordered) {
    background-color: var(--color-base-100);
  }
  :where(.divide-gray-100 > :not(:last-child)) {
    border-color: var(--color-gray-100);
  }
  .self-end {
    align-self: flex-end;
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .overflow-x-scroll {
    overflow-x: scroll;
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .\!rounded-full {
    border-radius: calc(infinity * 1px) !important;
  }
  .\!rounded-xs {
    border-radius: var(--radius-xs) !important;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .rounded-sm {
    border-radius: var(--radius-sm);
  }
  .rounded-xl {
    border-radius: var(--radius-xl);
  }
  .rounded-e-md {
    border-start-end-radius: var(--radius-md);
    border-end-end-radius: var(--radius-md);
  }
  .rounded-t-lg {
    border-top-left-radius: var(--radius-lg);
    border-top-right-radius: var(--radius-lg);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-3 {
    border-style: var(--tw-border-style);
    border-width: 3px;
  }
  .btn-text {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: "";
    --btn-border: "";
    --btn-noise: none;
    border-width: 0;
    outline-color: var(--btn-color, var(--color-neutral));
  }
  @media (hover: hover) {
    .btn-text:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-text:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
  }
  .btn-text:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-text:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
    }
  }
  .btn-text.btn-active {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-text.btn-active {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
    }
  }
  .btn-soft {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
  }
  .btn-soft {
    border-width: 0;
    --btn-noise: none;
  }
  .btn-soft:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
    }
  }
  @media (hover: hover) {
    .btn-soft:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-soft:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
  }
  .btn-soft.btn-active {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft.btn-active {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
    }
  }
  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .\!border-none {
    --tw-border-style: none !important;
    border-style: none !important;
  }
  .border-solid {
    --tw-border-style: solid;
    border-style: solid;
  }
  .input.is-valid, .input:has(.is-valid), .validate .input:valid, .validate .input:has(:valid) {
    border-color: var(--color-success);
  }
  @media (hover: hover) {
    .input.is-valid:hover, .input:has(.is-valid):hover, .validate .input:valid:hover, .validate .input:has(:valid):hover {
      border-color: var(--color-success);
    }
  }
  .input.is-valid:has(:hover):not(:focus, :focus-within), .input:has(.is-valid):has(:hover):not(:focus, :focus-within), .validate .input:valid:has(:hover):not(:focus, :focus-within), .validate .input:has(:valid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-success);
  }
  .input.is-valid:focus, .input.is-valid:focus-within, .input:has(.is-valid):focus, .input:has(.is-valid):focus-within, .validate .input:valid:focus, .validate .input:valid:focus-within, .validate .input:has(:valid):focus, .validate .input:has(:valid):focus-within {
    --input-color: var(--color-success);
  }
  .input.is-invalid, .input:has(.is-invalid), .validate .input:invalid, .validate .input:has(:invalid) {
    border-color: var(--color-error);
  }
  @media (hover: hover) {
    .input.is-invalid:hover, .input:has(.is-invalid):hover, .validate .input:invalid:hover, .validate .input:has(:invalid):hover {
      border-color: var(--color-error);
    }
  }
  .input.is-invalid:has(:hover):not(:focus, :focus-within), .input:has(.is-invalid):has(:hover):not(:focus, :focus-within), .validate .input:invalid:has(:hover):not(:focus, :focus-within), .validate .input:has(:invalid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-error);
  }
  .input.is-invalid:focus, .input.is-invalid:focus-within, .input:has(.is-invalid):focus, .input:has(.is-invalid):focus-within, .validate .input:invalid:focus, .validate .input:invalid:focus-within, .validate .input:has(:invalid):focus, .validate .input:has(:invalid):focus-within {
    --input-color: var(--color-error);
  }
  .input.is-valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .validate .input:valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .input.is-invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .validate .input:invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .input-floating > .input.is-valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .validate .input-floating > .input:valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .input-floating > .input.is-invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .validate .input-floating > .input:invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .input.is-invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .input-floating > .input.is-invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .label-text:has(~ .is-invalid) {
    color: var(--color-error);
  }
  .label-text:has(~ * .is-invalid) {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .helper-text {
    color: var(--color-error);
  }
  *:has(.is-invalid) ~ .helper-text {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text * {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ * >.label-text {
    color: var(--color-error);
  }
  select.is-invalid + .advance-select-toggle {
    --input-color: var(--color-error);
  }
  select.is-invalid + .advance-select-toggle:focus, select.is-invalid + .advance-select-toggle:focus-within {
    --input-color: var(--color-error);
  }
  .advance-select-tag:has(> .is-invalid) {
    --input-color: var(--color-error);
  }
  .advance-select-tag:has(> .is-invalid):focus, .advance-select-tag:has(> .is-invalid):focus-within {
    --input-color: var(--color-error);
  }
  @media (hover: hover) {
    .input-floating:has(.is-invalid):hover {
      border-color: var(--color-error);
    }
  }
  .input-floating:has(.is-invalid) .input-floating-label {
    color: var(--color-error);
  }
  .input-floating:has(.is-invalid):focus-within .input-floating-label, .input-floating:has(.is-invalid):not(:has(input:placeholder-shown)) .input-floating-label, .input-floating:has(.is-invalid):has(.input:focus) .input-floating-label {
    color: var(--color-error);
  }
  .textarea-floating:has(.is-invalid) .textarea-floating-label {
    color: var(--color-error);
  }
  .textarea-floating:has(.is-invalid):focus-within .textarea-floating-label, .textarea-floating:has(.is-invalid):not(:has(textarea:placeholder-shown)) .textarea-floating-label, .textarea-floating:has(.is-invalid):has(.textarea:focus) .textarea-floating-label {
    color: var(--color-error);
  }
  .select-floating:has(.is-invalid) .select-floating-label {
    color: var(--color-error);
  }
  .select-floating:has(.is-invalid):focus-within .select-floating-label, .select-floating:has(.is-invalid):not(:has(select:placeholder-shown)) .select-floating-label, .select-floating:has(.is-invalid):has(.select:focus) .select-floating-label {
    color: var(--color-error);
  }
  .input.is-valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .input-floating > .input.is-valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .label-text:has(~ .is-valid) {
    color: var(--color-success);
  }
  .label-text:has(~ * .is-valid) {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .helper-text {
    color: var(--color-success);
  }
  *:has(.is-valid) ~ .helper-text {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text * {
    color: var(--color-success);
  }
  :is(.is-valid) ~ * >.label-text {
    color: var(--color-success);
  }
  select.is-valid + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  select.is-valid + .advance-select-toggle:focus, select.is-valid + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  .advance-select-tag:has(> .is-valid) {
    --input-color: var(--color-success);
  }
  .advance-select-tag:has(> .is-valid):focus, .advance-select-tag:has(> .is-valid):focus-within {
    --input-color: var(--color-success);
  }
  @media (hover: hover) {
    .input-floating:has(.is-valid):hover {
      border-color: var(--color-success);
    }
  }
  .input-floating:has(.is-valid) .input-floating-label {
    color: var(--color-success);
  }
  .input-floating:has(.is-valid):focus-within .input-floating-label, .input-floating:has(.is-valid):not(:has(input:placeholder-shown)) .input-floating-label, .input-floating:has(.is-valid):has(.input:focus) .input-floating-label {
    color: var(--color-success);
  }
  .textarea-floating:has(.is-valid) .textarea-floating-label {
    color: var(--color-success);
  }
  .textarea-floating:has(.is-valid):focus-within .textarea-floating-label, .textarea-floating:has(.is-valid):not(:has(textarea:placeholder-shown)) .textarea-floating-label, .textarea-floating:has(.is-valid):has(.textarea:focus) .textarea-floating-label {
    color: var(--color-success);
  }
  .select-floating:has(.is-valid) .select-floating-label {
    color: var(--color-success);
  }
  .select-floating:has(.is-valid):focus-within .select-floating-label, .select-floating:has(.is-valid):not(:has(select:placeholder-shown)) .select-floating-label, .select-floating:has(.is-valid):has(.select:focus) .select-floating-label {
    color: var(--color-success);
  }
  .checkbox.is-valid, .checkbox:has(.is-valid), .validate .checkbox:valid, .validate .checkbox:has(:valid) {
    --input-color: var(--color-success);
    border-color: var(--input-color);
  }
  .checkbox.is-valid:checked, .checkbox.is-valid[aria-checked="true"], .checkbox.is-valid:has(> input:checked), .checkbox:has(.is-valid):checked, .checkbox:has(.is-valid)[aria-checked="true"], .checkbox:has(.is-valid):has(> input:checked), .validate .checkbox:valid:checked, .validate .checkbox:valid[aria-checked="true"], .validate .checkbox:valid:has(> input:checked), .validate .checkbox:has(:valid):checked, .validate .checkbox:has(:valid)[aria-checked="true"], .validate .checkbox:has(:valid):has(> input:checked) {
    --input-color: var(--color-success);
  }
  .checkbox.is-invalid, .checkbox:has(.is-invalid), .validate .checkbox:invalid, .validate .checkbox:has(:invalid) {
    --input-color: var(--color-error);
    border-color: var(--input-color);
  }
  .checkbox.is-invalid:checked, .checkbox.is-invalid[aria-checked="true"], .checkbox.is-invalid:has(> input:checked), .checkbox:has(.is-invalid):checked, .checkbox:has(.is-invalid)[aria-checked="true"], .checkbox:has(.is-invalid):has(> input:checked), .validate .checkbox:invalid:checked, .validate .checkbox:invalid[aria-checked="true"], .validate .checkbox:invalid:has(> input:checked), .validate .checkbox:has(:invalid):checked, .validate .checkbox:has(:invalid)[aria-checked="true"], .validate .checkbox:has(:invalid):has(> input:checked) {
    --input-color: var(--color-error);
  }
  .checkbox.is-valid, .checkbox:has(.is-valid), .validate .checkbox:valid, .validate .checkbox:has(:valid) {
    color: var(--color-success-content);
  }
  .checkbox.is-invalid, .checkbox:has(.is-invalid), .validate .checkbox:invalid, .validate .checkbox:has(:invalid) {
    color: var(--color-error-content);
  }
  .alert-error {
    border-color: var(--color-error);
    color: var(--color-error-content);
    --alert-color: var(--color-error);
  }
  .alert-success {
    border-color: var(--color-success);
    color: var(--color-success-content);
    --alert-color: var(--color-success);
  }
  .select.is-valid, .select:has(.is-valid), .validate .select:valid, .validate .select:has(:valid) {
    border-color: var(--color-success);
  }
  @media (hover: hover) {
    .select.is-valid:hover, .select:has(.is-valid):hover, .validate .select:valid:hover, .validate .select:has(:valid):hover {
      border-color: var(--color-success);
    }
  }
  .select.is-valid:has(:hover):not(:focus, :focus-within), .select:has(.is-valid):has(:hover):not(:focus, :focus-within), .validate .select:valid:has(:hover):not(:focus, :focus-within), .validate .select:has(:valid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-success);
  }
  .select.is-valid:focus, .select.is-valid:focus-within, .select:has(.is-valid):focus, .select:has(.is-valid):focus-within, .validate .select:valid:focus, .validate .select:valid:focus-within, .validate .select:has(:valid):focus, .validate .select:has(:valid):focus-within {
    --input-color: var(--color-success);
  }
  .select.is-invalid, .select:has(.is-invalid), .validate .select:invalid, .validate .select:has(:invalid) {
    border-color: var(--color-error);
  }
  @media (hover: hover) {
    .select.is-invalid:hover, .select:has(.is-invalid):hover, .validate .select:invalid:hover, .validate .select:has(:invalid):hover {
      border-color: var(--color-error);
    }
  }
  .select.is-invalid:has(:hover):not(:focus, :focus-within), .select:has(.is-invalid):has(:hover):not(:focus, :focus-within), .validate .select:invalid:has(:hover):not(:focus, :focus-within), .validate .select:has(:invalid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-error);
  }
  .select.is-invalid:focus, .select.is-invalid:focus-within, .select:has(.is-invalid):focus, .select:has(.is-invalid):focus-within, .validate .select:invalid:focus, .validate .select:invalid:focus-within, .validate .select:has(:invalid):focus, .validate .select:has(:invalid):focus-within {
    --input-color: var(--color-error);
  }
  .textarea.is-valid, .textarea:has(.is-valid), .validate .textarea:valid, .validate .textarea:has(:valid) {
    border-color: var(--color-success);
  }
  @media (hover: hover) {
    .textarea.is-valid:hover, .textarea:has(.is-valid):hover, .validate .textarea:valid:hover, .validate .textarea:has(:valid):hover {
      border-color: var(--color-success);
    }
  }
  .textarea.is-valid:has(:hover):not(:focus, :focus-within), .textarea:has(.is-valid):has(:hover):not(:focus, :focus-within), .validate .textarea:valid:has(:hover):not(:focus, :focus-within), .validate .textarea:has(:valid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-success);
  }
  .textarea.is-valid:focus, .textarea.is-valid:focus-within, .textarea:has(.is-valid):focus, .textarea:has(.is-valid):focus-within, .validate .textarea:valid:focus, .validate .textarea:valid:focus-within, .validate .textarea:has(:valid):focus, .validate .textarea:has(:valid):focus-within {
    --input-color: var(--color-success);
  }
  .textarea.is-invalid, .textarea:has(.is-invalid), .validate .textarea:invalid, .validate .textarea:has(:invalid) {
    border-color: var(--color-error);
  }
  @media (hover: hover) {
    .textarea.is-invalid:hover, .textarea:has(.is-invalid):hover, .validate .textarea:invalid:hover, .validate .textarea:has(:invalid):hover {
      border-color: var(--color-error);
    }
  }
  .textarea.is-invalid:has(:hover):not(:focus, :focus-within), .textarea:has(.is-invalid):has(:hover):not(:focus, :focus-within), .validate .textarea:invalid:has(:hover):not(:focus, :focus-within), .validate .textarea:has(:invalid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-error);
  }
  .textarea.is-invalid:focus, .textarea.is-invalid:focus-within, .textarea:has(.is-invalid):focus, .textarea:has(.is-invalid):focus-within, .validate .textarea:invalid:focus, .validate .textarea:invalid:focus-within, .validate .textarea:has(:invalid):focus, .validate .textarea:has(:invalid):focus-within {
    --input-color: var(--color-error);
  }
  .radio.is-valid, .radio:has(.is-valid), .validate .radio:valid, .validate .radio:has(:valid) {
    --input-color: var(--color-success);
    border-color: var(--input-color);
  }
  .radio.is-valid:checked, .radio.is-valid[aria-checked="true"], .radio.is-valid:has(> input:checked), .radio:has(.is-valid):checked, .radio:has(.is-valid)[aria-checked="true"], .radio:has(.is-valid):has(> input:checked), .validate .radio:valid:checked, .validate .radio:valid[aria-checked="true"], .validate .radio:valid:has(> input:checked), .validate .radio:has(:valid):checked, .validate .radio:has(:valid)[aria-checked="true"], .validate .radio:has(:valid):has(> input:checked) {
    --input-color: var(--color-success);
  }
  .radio.is-invalid, .radio:has(.is-invalid), .validate .radio:invalid, .validate .radio:has(:invalid) {
    --input-color: var(--color-error);
    border-color: var(--input-color);
  }
  .radio.is-invalid:checked, .radio.is-invalid[aria-checked="true"], .radio.is-invalid:has(> input:checked), .radio:has(.is-invalid):checked, .radio:has(.is-invalid)[aria-checked="true"], .radio:has(.is-invalid):has(> input:checked), .validate .radio:invalid:checked, .validate .radio:invalid[aria-checked="true"], .validate .radio:invalid:has(> input:checked), .validate .radio:has(:invalid):checked, .validate .radio:has(:invalid)[aria-checked="true"], .validate .radio:has(:invalid):has(> input:checked) {
    --input-color: var(--color-error);
  }
  .switch.is-valid, .switch:has(.is-valid), .validate .switch:valid, .validate .switch:has(:valid) {
    --input-color: var(--color-success);
    border-color: var(--input-color);
  }
  .switch.is-valid:checked, .switch.is-valid[aria-checked="true"], .switch.is-valid:has(> input:checked), .switch:has(.is-valid):checked, .switch:has(.is-valid)[aria-checked="true"], .switch:has(.is-valid):has(> input:checked), .validate .switch:valid:checked, .validate .switch:valid[aria-checked="true"], .validate .switch:valid:has(> input:checked), .validate .switch:has(:valid):checked, .validate .switch:has(:valid)[aria-checked="true"], .validate .switch:has(:valid):has(> input:checked) {
    --input-color: var(--color-success);
  }
  .switch.is-invalid, .switch:has(.is-invalid), .validate .switch:invalid, .validate .switch:has(:invalid) {
    --input-color: var(--color-error);
    border-color: var(--input-color);
  }
  .switch.is-invalid:checked, .switch.is-invalid[aria-checked="true"], .switch.is-invalid:has(> input:checked), .switch:has(.is-invalid):checked, .switch:has(.is-invalid)[aria-checked="true"], .switch:has(.is-invalid):has(> input:checked), .validate .switch:invalid:checked, .validate .switch:invalid[aria-checked="true"], .validate .switch:invalid:has(> input:checked), .validate .switch:has(:invalid):checked, .validate .switch:has(:invalid)[aria-checked="true"], .validate .switch:has(:invalid):has(> input:checked) {
    --input-color: var(--color-error);
  }
  .\!border-base-content\/40 {
    border-color: var(--color-base-content) !important;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .\!border-base-content\/40 {
      border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent) !important;
    }
  }
  .border-base-content\/20 {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-base-content\/20 {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .border-base-content\/40 {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-base-content\/40 {
      border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .border-current {
    border-color: currentcolor;
  }
  .border-gray-200 {
    border-color: var(--color-gray-200);
  }
  .border-gray-300 {
    border-color: var(--color-gray-300);
  }
  .border-transparent {
    border-color: transparent;
  }
  .border-t-transparent {
    border-top-color: transparent;
  }
  .progress-primary {
    background-color: var(--color-primary);
    color: var(--color-primary-content);
  }
  .\!bg-base-100 {
    background-color: var(--color-base-100) !important;
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-300\/60 {
    background-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-base-300\/60 {
      background-color: color-mix(in oklab, var(--color-base-300) 60%, transparent);
    }
  }
  .bg-blue-600 {
    background-color: var(--color-blue-600);
  }
  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }
  .bg-gray-200 {
    background-color: var(--color-gray-200);
  }
  .bg-gray-800 {
    background-color: var(--color-gray-800);
  }
  .bg-gray-900\/50 {
    background-color: color-mix(in srgb, oklch(21% 0.034 264.665) 50%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-gray-900\/50 {
      background-color: color-mix(in oklab, var(--color-gray-900) 50%, transparent);
    }
  }
  .bg-neutral-100 {
    background-color: var(--color-neutral-100);
  }
  .bg-red-600 {
    background-color: var(--color-red-600);
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .bg-gradient-to-r {
    --tw-gradient-position: to right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .from-indigo-500 {
    --tw-gradient-from: var(--color-indigo-500);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-blue-500 {
    --tw-gradient-to: var(--color-blue-500);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .loading-spinner {
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }
  .loading-spinner {
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .fill-black {
    fill: var(--color-black);
  }
  .fill-gray-200 {
    fill: var(--color-gray-200);
  }
  .fill-gray-500 {
    fill: var(--color-gray-500);
  }
  .stroke-current {
    stroke: currentcolor;
  }
  .p-0 {
    padding: calc(var(--spacing) * 0);
  }
  .p-0\.5 {
    padding: calc(var(--spacing) * 0.5);
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-2\.5 {
    padding: calc(var(--spacing) * 2.5);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .table-sm :where(thead, tfoot) {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .table-sm :not(thead, tfoot) tr {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .table-sm :where(th, td) {
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 2);
  }
  .table-sm :not(thead, tfoot) tr {
    font-size: 0.75rem;
  }
  .table-sm :where(th, td) {
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 2);
  }
  .\!px-2\.5 {
    padding-inline: calc(var(--spacing) * 2.5) !important;
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-2\.5 {
    padding-inline: calc(var(--spacing) * 2.5);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .px-5 {
    padding-inline: calc(var(--spacing) * 5);
  }
  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }
  .\!py-0\.5 {
    padding-block: calc(var(--spacing) * 0.5) !important;
  }
  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-2\.5 {
    padding-block: calc(var(--spacing) * 2.5);
  }
  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .py-8 {
    padding-block: calc(var(--spacing) * 8);
  }
  .ps-3 {
    padding-inline-start: calc(var(--spacing) * 3);
  }
  .ps-4 {
    padding-inline-start: calc(var(--spacing) * 4);
  }
  .pe-6 {
    padding-inline-end: calc(var(--spacing) * 6);
  }
  .pe-10 {
    padding-inline-end: calc(var(--spacing) * 10);
  }
  .pt-0 {
    padding-top: calc(var(--spacing) * 0);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .pt-20 {
    padding-top: calc(var(--spacing) * 20);
  }
  .pb-3 {
    padding-bottom: calc(var(--spacing) * 3);
  }
  .pb-4 {
    padding-bottom: calc(var(--spacing) * 4);
  }
  .text-center {
    text-align: center;
  }
  .text-end {
    text-align: end;
  }
  .text-left {
    text-align: left;
  }
  .text-right {
    text-align: right;
  }
  .text-start {
    text-align: start;
  }
  .align-bottom {
    vertical-align: bottom;
  }
  .font-serif {
    font-family: var(--font-serif);
  }
  .btn-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 7.5);
  }
  .\!text-sm {
    font-size: var(--text-sm) !important;
    line-height: var(--tw-leading, var(--text-sm--line-height)) !important;
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .select-sm {
    --size: calc(var(--size-field, 0.25rem) * 8);
    font-size: 0.75rem;
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .leading-tight {
    --tw-leading: var(--leading-tight);
    line-height: var(--leading-tight);
  }
  .\!font-medium {
    --tw-font-weight: var(--font-weight-medium) !important;
    font-weight: var(--font-weight-medium) !important;
  }
  .\!font-semibold {
    --tw-font-weight: var(--font-weight-semibold) !important;
    font-weight: var(--font-weight-semibold) !important;
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-extrabold {
    --tw-font-weight: var(--font-weight-extrabold);
    font-weight: var(--font-weight-extrabold);
  }
  .font-light {
    --tw-font-weight: var(--font-weight-light);
    font-weight: var(--font-weight-light);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-normal {
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-normal {
    --tw-tracking: var(--tracking-normal);
    letter-spacing: var(--tracking-normal);
  }
  .tracking-tight {
    --tw-tracking: var(--tracking-tight);
    letter-spacing: var(--tracking-tight);
  }
  .text-nowrap {
    text-wrap: nowrap;
  }
  .whitespace-nowrap {
    white-space: nowrap;
  }
  .label-text:has(~ .is-valid) {
    color: var(--color-success);
  }
  .label-text:has(~ * .is-valid) {
    color: var(--color-success);
  }
  .validate .label-text:has(~ :valid) {
    color: var(--color-success);
  }
  .validate .label-text:has(~ * :valid) {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text * {
    color: var(--color-success);
  }
  :is(.is-valid) ~ * >.label-text {
    color: var(--color-success);
  }
  .validate :is(:valid) ~ .label-text {
    color: var(--color-success);
  }
  .validate :is(:valid) ~ .label-text * {
    color: var(--color-success);
  }
  .validate :is(:valid) ~ * >.label-text {
    color: var(--color-success);
  }
  .label-text:has(~ .is-invalid) {
    color: var(--color-error);
  }
  .label-text:has(~ * .is-invalid) {
    color: var(--color-error);
  }
  .validate .label-text:has(~ :invalid) {
    color: var(--color-error);
  }
  .validate .label-text:has(~ * :invalid) {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text * {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ * >.label-text {
    color: var(--color-error);
  }
  .validate :is(:invalid) ~ .label-text {
    color: var(--color-error);
  }
  .validate :is(:invalid) ~ .label-text * {
    color: var(--color-error);
  }
  .validate :is(:invalid) ~ * >.label-text {
    color: var(--color-error);
  }
  .alert-error {
    color: var(--color-error-content);
    --alert-color: var(--color-error);
  }
  .alert-success {
    color: var(--color-success-content);
    --alert-color: var(--color-success);
  }
  .link-info {
    color: var(--color-info);
  }
  @media (hover: hover) {
    .link-info:hover {
      color: var(--color-info);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .link-info:hover {
        color: color-mix(in oklab, var(--color-info) 80%, #000);
      }
    }
  }
  .progress-primary {
    color: var(--color-primary);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/50 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/50 {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/80 {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-black {
    color: var(--color-black);
  }
  .text-blue-600 {
    color: var(--color-blue-600);
  }
  .text-blue-700 {
    color: var(--color-blue-700);
  }
  .text-error {
    color: var(--color-error);
  }
  .text-gray-400 {
    color: var(--color-gray-400);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-gray-700 {
    color: var(--color-gray-700);
  }
  .text-gray-800 {
    color: var(--color-gray-800);
  }
  .text-gray-900 {
    color: var(--color-gray-900);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-red-900 {
    color: var(--color-red-900);
  }
  .text-success {
    color: var(--color-success);
  }
  .text-white {
    color: var(--color-white);
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .opacity-0 {
    opacity: 0%;
  }
  .opacity-100 {
    opacity: 100%;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-2xl {
    --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, rgb(0 0 0 / 0.25));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-base-300\/20 {
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .shadow-base-300\/20 {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .\!filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .carousel-slide {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-75 {
    --tw-duration: 75ms;
    transition-duration: 75ms;
  }
  .duration-150 {
    --tw-duration: 150ms;
    transition-duration: 150ms;
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-shadow: "";
    --btn-fg: var(--btn-color, var(--color-base-content));
    --btn-bg: var(--btn-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-bg: color-mix(
      in oklab,
      var(--btn-color, var(--color-base-content)) 8%,
      var(--color-base-100)
    );
    }
  }
  .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-border: var(--btn-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-border: color-mix(
      in oklab,
      var(--btn-color, var(--color-base-content)) 10%,
      var(--color-base-100)
    );
    }
  }
  .btn-soft:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-noise: none;
  }
  @media (hover: none) {
    .btn-soft:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-shadow: "";
      --btn-fg: var(--btn-color, var(--color-base-content));
      --btn-bg: var(--btn-color, var(--color-base-content));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-soft:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
        --btn-bg: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 8%,
        var(--color-base-100)
      );
      }
    }
    .btn-soft:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-border: var(--btn-color, var(--color-base-content));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-soft:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
        --btn-border: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 10%,
        var(--color-base-100)
      );
      }
    }
    .btn-soft:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-noise: none;
    }
  }
  select.is-valid + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  select.is-valid + .advance-select-toggle:focus, select.is-valid + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle:focus, .validate select:has(~ * > .selected) + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  select.is-invalid + .advance-select-toggle {
    --input-color: var(--color-error);
  }
  select.is-invalid + .advance-select-toggle:focus, select.is-invalid + .advance-select-toggle:focus-within {
    --input-color: var(--color-error);
  }
  .validate select:not(:has(~ * > .selected)) + .advance-select-toggle {
    --input-color: var(--color-error);
  }
  .validate select:not(:has(~ * > .selected)) + .advance-select-toggle:focus, .validate select:not(:has(~ * > .selected)) + .advance-select-toggle:focus-within {
    --input-color: var(--color-error);
  }
  .btn-sm {
    --fontsize: 0.75rem;
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 8);
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }
  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle:focus, .validate select:has(~ * > .selected) + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  .backface-hidden {
    backface-visibility: hidden;
  }
  .link-info {
    --link-color: var(--color-info);
  }
  .text-shadow-gray-950 {
    --tw-text-shadow-color: oklch(13% 0.028 261.692);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-shadow-gray-950 {
      --tw-text-shadow-color: color-mix(in oklab, var(--color-gray-950) var(--tw-text-shadow-alpha), transparent);
    }
  }
  @media (hover: hover) {
    .group-hover\:text-gray-900:is(:where(.group):hover *) {
      color: var(--color-gray-900);
    }
  }
  .before\:absolute::before {
    content: var(--tw-content);
    position: absolute;
  }
  .before\:inset-0::before {
    content: var(--tw-content);
    inset: calc(var(--spacing) * 0);
  }
  .before\:-top-1::before {
    content: var(--tw-content);
    top: calc(var(--spacing) * -1);
  }
  .before\:z-1::before {
    content: var(--tw-content);
    z-index: 1;
  }
  .before\:h-1::before {
    content: var(--tw-content);
    height: calc(var(--spacing) * 1);
  }
  .before\:w-full::before {
    content: var(--tw-content);
    width: 100%;
  }
  .before\:bg-purple-200::before {
    content: var(--tw-content);
    background-color: var(--color-purple-200);
  }
  .before\:duration-500::before {
    content: var(--tw-content);
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  @media (hover: hover) {
    .hover\:translate-y-2:hover {
      --tw-translate-y: calc(var(--spacing) * 2);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
  @media (hover: hover) {
    .hover\:bg-blue-700:hover {
      background-color: var(--color-blue-700);
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-50:hover {
      background-color: var(--color-gray-50);
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-100:hover {
      background-color: var(--color-gray-100);
    }
  }
  @media (hover: hover) {
    .hover\:bg-indigo-600:hover {
      background-color: var(--color-indigo-600);
    }
  }
  @media (hover: hover) {
    .hover\:to-blue-600:hover {
      --tw-gradient-to: var(--color-blue-600);
      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
    }
  }
  @media (hover: hover) {
    .hover\:text-gray-600:hover {
      color: var(--color-gray-600);
    }
  }
  @media (hover: hover) {
    .hover\:text-gray-800:hover {
      color: var(--color-gray-800);
    }
  }
  @media (hover: hover) {
    .hover\:underline:hover {
      text-decoration-line: underline;
    }
  }
  @media (hover: hover) {
    .hover\:before\:top-0:hover::before {
      content: var(--tw-content);
      top: calc(var(--spacing) * 0);
    }
  }
  .focus\:border-blue-500:focus {
    border-color: var(--color-blue-500);
  }
  .focus\:border-primary:focus {
    border-color: var(--color-primary);
  }
  .focus\:bg-gray-50:focus {
    background-color: var(--color-gray-50);
  }
  .focus\:bg-gray-100:focus {
    background-color: var(--color-gray-100);
  }
  .focus\:text-blue-600:focus {
    color: var(--color-blue-600);
  }
  .focus\:text-gray-600:focus {
    color: var(--color-gray-600);
  }
  .focus\:ring-2:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .focus\:ring-4:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .focus\:ring-blue-500:focus {
    --tw-ring-color: var(--color-blue-500);
  }
  .focus\:ring-gray-200:focus {
    --tw-ring-color: var(--color-gray-200);
  }
  .focus\:ring-gray-300:focus {
    --tw-ring-color: var(--color-gray-300);
  }
  .focus\:outline-hidden:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .focus\:outline-hidden:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .focus\:outline-1:focus {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .focus\:outline-primary:focus {
    outline-color: var(--color-primary);
  }
  .focus\:outline-none:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  .disabled\:pointer-events-none:disabled {
    pointer-events: none;
  }
  .disabled\:opacity-50:disabled {
    opacity: 50%;
  }
  @media (width >= 40rem) {
    .sm\:ml-64 {
      margin-left: calc(var(--spacing) * 64);
    }
  }
  @media (width >= 40rem) {
    .sm\:block {
      display: block;
    }
  }
  @media (width >= 40rem) {
    .sm\:flex {
      display: flex;
    }
  }
  @media (width >= 40rem) {
    .sm\:hidden {
      display: none;
    }
  }
  @media (width >= 40rem) {
    .sm\:max-w-md {
      max-width: var(--container-md);
    }
  }
  @media (width >= 40rem) {
    .sm\:translate-x-0 {
      --tw-translate-x: calc(var(--spacing) * 0);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
  @media (width >= 40rem) {
    .sm\:rounded-lg {
      border-radius: var(--radius-lg);
    }
  }
  @media (width >= 40rem) {
    .sm\:border-r {
      border-right-style: var(--tw-border-style);
      border-right-width: 1px;
    }
  }
  @media (width >= 40rem) {
    .sm\:border-b-0 {
      border-bottom-style: var(--tw-border-style);
      border-bottom-width: 0px;
    }
  }
  @media (width >= 40rem) {
    .sm\:p-8 {
      padding: calc(var(--spacing) * 8);
    }
  }
  @media (width >= 40rem) {
    .sm\:py-3 {
      padding-block: calc(var(--spacing) * 3);
    }
  }
  @media (width >= 40rem) {
    .sm\:text-sm {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }
  @media (width >= 48rem) {
    .md\:me-24 {
      margin-inline-end: calc(var(--spacing) * 24);
    }
  }
  @media (width >= 48rem) {
    .md\:mt-0 {
      margin-top: calc(var(--spacing) * 0);
    }
  }
  @media (width >= 48rem) {
    .md\:h-screen {
      height: 100vh;
    }
  }
  @media (width >= 48rem) {
    .md\:grid-cols-5 {
      grid-template-columns: repeat(5, minmax(0, 1fr));
    }
  }
  @media (width >= 48rem) {
    :where(.md\:space-y-6 > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 6) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  @media (width >= 48rem) {
    .md\:text-2xl {
      font-size: var(--text-2xl);
      line-height: var(--tw-leading, var(--text-2xl--line-height));
    }
  }
  @media (width >= 64rem) {
    .lg\:flex-row-reverse {
      flex-direction: row-reverse;
    }
  }
  @media (width >= 64rem) {
    .lg\:px-5 {
      padding-inline: calc(var(--spacing) * 5);
    }
  }
  @media (width >= 64rem) {
    .lg\:py-0 {
      padding-block: calc(var(--spacing) * 0);
    }
  }
  @media (width >= 64rem) {
    .lg\:pl-3 {
      padding-left: calc(var(--spacing) * 3);
    }
  }
  @media (width >= 80rem) {
    .xl\:p-0 {
      padding: calc(var(--spacing) * 0);
    }
  }
  .rtl\:\!mr-0:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    margin-right: calc(var(--spacing) * 0) !important;
  }
  .rtl\:justify-end:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    justify-content: flex-end;
  }
  .rtl\:text-right:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  @media (prefers-color-scheme: dark) {
    :where(.dark\:divide-gray-600 > :not(:last-child)) {
      border-color: var(--color-gray-600);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:border {
      border-style: var(--tw-border-style);
      border-width: 1px;
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:border-gray-600 {
      border-color: var(--color-gray-600);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:border-gray-700 {
      border-color: var(--color-gray-700);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:border-neutral-600 {
      border-color: var(--color-neutral-600);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:border-neutral-700 {
      border-color: var(--color-neutral-700);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-blue-500 {
      background-color: var(--color-blue-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-gray-700 {
      background-color: var(--color-gray-700);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-gray-800 {
      background-color: var(--color-gray-800);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-gray-900 {
      background-color: var(--color-gray-900);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-neutral-700 {
      background-color: var(--color-neutral-700);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-neutral-800 {
      background-color: var(--color-neutral-800);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-neutral-900 {
      background-color: var(--color-neutral-900);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:bg-neutral-900\/80 {
      background-color: color-mix(in srgb, oklch(20.5% 0 0) 80%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .dark\:bg-neutral-900\/80 {
        background-color: color-mix(in oklab, var(--color-neutral-900) 80%, transparent);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:fill-gray-400 {
      fill: var(--color-gray-400);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:fill-neutral-200 {
      fill: var(--color-neutral-200);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-blue-500 {
      color: var(--color-blue-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-gray-300 {
      color: var(--color-gray-300);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-gray-400 {
      color: var(--color-gray-400);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-neutral-200 {
      color: var(--color-neutral-200);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-neutral-400 {
      color: var(--color-neutral-400);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-neutral-500 {
      color: var(--color-neutral-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-neutral-600 {
      color: var(--color-neutral-600);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:text-white {
      color: var(--color-white);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:placeholder-gray-400::placeholder {
      color: var(--color-gray-400);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:placeholder-neutral-500::placeholder {
      color: var(--color-neutral-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:group-hover\:text-white:is(:where(.group):hover *) {
        color: var(--color-white);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:bg-gray-600:hover {
        background-color: var(--color-gray-600);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:bg-gray-700:hover {
        background-color: var(--color-gray-700);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:bg-neutral-800:hover {
        background-color: var(--color-neutral-800);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:bg-white\/10:hover {
        background-color: color-mix(in srgb, #fff 10%, transparent);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .dark\:hover\:bg-white\/10:hover {
          background-color: color-mix(in oklab, var(--color-white) 10%, transparent);
        }
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:text-neutral-200:hover {
        color: var(--color-neutral-200);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:text-neutral-300:hover {
        color: var(--color-neutral-300);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    @media (hover: hover) {
      .dark\:hover\:text-white:hover {
        color: var(--color-white);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:border-blue-500:focus {
      border-color: var(--color-blue-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:bg-neutral-800:focus {
      background-color: var(--color-neutral-800);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:bg-white\/10:focus {
      background-color: color-mix(in srgb, #fff 10%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .dark\:focus\:bg-white\/10:focus {
        background-color: color-mix(in oklab, var(--color-white) 10%, transparent);
      }
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:text-blue-500:focus {
      color: var(--color-blue-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:text-neutral-300:focus {
      color: var(--color-neutral-300);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:ring-blue-500:focus {
      --tw-ring-color: var(--color-blue-500);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:ring-gray-600:focus {
      --tw-ring-color: var(--color-gray-600);
    }
  }
  @media (prefers-color-scheme: dark) {
    .dark\:focus\:ring-neutral-600:focus {
      --tw-ring-color: var(--color-neutral-600);
    }
  }
  .selected\:block.selected {
    display: block;
  }
  .selected .selected\:block {
    display: block;
  }
  .selected\:select-active.selected {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .selected\:select-active.selected {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .selected\:select-active.selected {
    color: var(--color-primary);
  }
  .selected .selected\:select-active {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .selected .selected\:select-active {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .selected .selected\:select-active {
    color: var(--color-primary);
  }
  .select-disabled\:pointer-events-none.disabled {
    pointer-events: none;
  }
  .disabled .select-disabled\:pointer-events-none {
    pointer-events: none;
  }
  .select-disabled\:opacity-40.disabled {
    opacity: 40%;
  }
  .disabled .select-disabled\:opacity-40 {
    opacity: 40%;
  }
  .combo-box-selected\:block.selected {
    display: block;
  }
  .selected .combo-box-selected\:block {
    display: block;
  }
  .combo-box-selected\:dropdown-active.selected {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .combo-box-selected\:dropdown-active.selected {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .combo-box-selected\:dropdown-active.selected {
    color: var(--color-primary);
  }
  .selected .combo-box-selected\:dropdown-active {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .selected .combo-box-selected\:dropdown-active {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .selected .combo-box-selected\:dropdown-active {
    color: var(--color-primary);
  }
  .file-upload-complete\:progress-success.complete {
    background-color: var(--color-success);
    color: var(--color-success-content);
  }
  .complete .file-upload-complete\:progress-success {
    background-color: var(--color-success);
    color: var(--color-success-content);
  }
  .file-upload-complete\:progress-success.complete {
    color: var(--color-success);
  }
  .complete .file-upload-complete\:progress-success {
    color: var(--color-success);
  }
  .\[\&\:\:-webkit-scrollbar\]\:w-2::-webkit-scrollbar {
    width: calc(var(--spacing) * 2);
  }
  .\[\&\:\:-webkit-scrollbar-thumb\]\:rounded-full::-webkit-scrollbar-thumb {
    border-radius: calc(infinity * 1px);
  }
  .\[\&\:\:-webkit-scrollbar-thumb\]\:bg-gray-300::-webkit-scrollbar-thumb {
    background-color: var(--color-gray-300);
  }
  @media (prefers-color-scheme: dark) {
    .dark\:\[\&\:\:-webkit-scrollbar-thumb\]\:bg-neutral-500::-webkit-scrollbar-thumb {
      background-color: var(--color-neutral-500);
    }
  }
  .\[\&\:\:-webkit-scrollbar-track\]\:bg-gray-100::-webkit-scrollbar-track {
    background-color: var(--color-gray-100);
  }
  @media (prefers-color-scheme: dark) {
    .dark\:\[\&\:\:-webkit-scrollbar-track\]\:bg-neutral-700::-webkit-scrollbar-track {
      background-color: var(--color-neutral-700);
    }
  }
}
.nav-bg {
  background-color: #012033;
}
.bill {
  width: 200px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 10px;
  padding: 0px 15px;
  background-color: rgb(66, 66, 66);
  border-radius: 10px;
  color: white;
  border: none;
  position: relative;
  cursor: pointer;
  transition-duration: .2s;
}
.bell {
  width: 13px;
}
.bell path {
  fill: rgb(0, 206, 62);
}
.bill:hover {
  background-color: rgb(77, 77, 77);
  transition-duration: .2s;
}
.chart {
  --bg: #f1f1f1;
  --contrast: #f9f9f9;
  --grey: #d9d9d9;
  position: relative;
  width: fit-content;
  height: auto;
  padding: 12px;
  background-color: var(--bg);
  border-radius: 20px;
  box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 20px -10px;
}
.chart-overlay {
  position: absolute;
  inset: 0;
  pointer-events: none;
  background: repeating-linear-gradient(45deg, var(--bg), var(--grey) 20px);
  filter: opacity(15%);
}
.chart-inner {
  display: flex;
  justify-content: start;
  align-items: center;
  overflow: hidden;
  width: auto;
  height: auto;
  background-color: var(--contrast);
  border-radius: 25px;
  font-size: 26px;
  font-weight: 700;
  color: #555;
  text-align: center;
  font-family: Arial, sans-serif;
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(31.23% 0.026 301.24);
      --color-base-200: oklch(25.39% 0.025 298.72);
      --color-base-300: oklch(23.44% 0.0194 298.63);
      --color-base-content: oklch(84.98% 0.014 295.28);
      --color-primary: oklch(53.93% 0.271 286.75);
      --color-primary-content: oklch(88.22% 0.062 290.17);
      --color-secondary: oklch(49.12% 0.021 303.05);
      --color-secondary-content: oklch(88.83% 0.007 304.23);
      --color-accent: oklch(54.61% 0.215 262.88);
      --color-accent-content: oklch(88.23% 0.057 254.13);
      --color-neutral: oklch(65.75% 0.022 294.95);
      --color-neutral-content: oklch(18.51% 0.017 301.92);
      --color-info: oklch(60.89% 0.111 221.72);
      --color-info-content: oklch(91.67% 0.077 205.04);
      --color-success: oklch(67.35% 0.201 146.84);
      --color-success-content: oklch(91.38% 0.069 168.24);
      --color-warning: oklch(72.59% 0.152 69.05);
      --color-warning-content: oklch(96.07% 0.057 93.2);
      --color-error: oklch(59.54% 0.208 26.28);
      --color-error-content: oklch(93.4% 0.039 54.86);
      --radius-selector: 0.25rem;
      --radius-field: 0.375rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(31.23% 0.026 301.24);
    --color-base-200: oklch(25.39% 0.025 298.72);
    --color-base-300: oklch(23.44% 0.0194 298.63);
    --color-base-content: oklch(84.98% 0.014 295.28);
    --color-primary: oklch(53.93% 0.271 286.75);
    --color-primary-content: oklch(88.22% 0.062 290.17);
    --color-secondary: oklch(49.12% 0.021 303.05);
    --color-secondary-content: oklch(88.83% 0.007 304.23);
    --color-accent: oklch(54.61% 0.215 262.88);
    --color-accent-content: oklch(88.23% 0.057 254.13);
    --color-neutral: oklch(65.75% 0.022 294.95);
    --color-neutral-content: oklch(18.51% 0.017 301.92);
    --color-info: oklch(60.89% 0.111 221.72);
    --color-info-content: oklch(91.67% 0.077 205.04);
    --color-success: oklch(67.35% 0.201 146.84);
    --color-success-content: oklch(91.38% 0.069 168.24);
    --color-warning: oklch(72.59% 0.152 69.05);
    --color-warning-content: oklch(96.07% 0.057 93.2);
    --color-error: oklch(59.54% 0.208 26.28);
    --color-error-content: oklch(93.4% 0.039 54.86);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
  .tooltip {
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  button:not(:disabled), [role="button"]:not(:disabled) {
    cursor: pointer;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 20%, #0000) #0000;
    }
  }
}
@keyframes indeterminate-progress {
  0% {
    background-position-x: -75%;
  }
  50% {
    background-position-x: 125%;
  }
  100% {
    background-position-x: -75%;
  }
}
@keyframes progress-bar-stripes {
  0% {
    background-position-x: 0.75rem;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes radio-inset {
  0% {
    padding: 1px;
  }
  50% {
    padding: 4px;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-gradient-position {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}
@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}
@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@property --tw-text-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-text-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-content {
  syntax: "*";
  initial-value: "";
  inherits: false;
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-divide-y-reverse: 0;
      --tw-border-style: solid;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
      --tw-ease: initial;
      --tw-text-shadow-color: initial;
      --tw-text-shadow-alpha: 100%;
      --tw-content: "";
    }
  }
}